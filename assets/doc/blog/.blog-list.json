{
  "JS-zhong-wei-cao-zuo": {
    "relatedTags": [
      "位操作"
    ],
    "created_at": "2018-07-03",
    "timeArr": [
      2018,
      6,
      3,
      0,
      0,
      0,
      0
    ],
    "title": "JS中位操作",
    "uuid": "18afb8f32bc7fc0b2ce146673e4998010db08a12",
    "summary": "<h4>JS按位操作符</h4>\n<ul>\n<li>按位异或(^)：二进制编码中，每一位两者相同，则为0，两者不同，则为1</li>\n<li>按位与 (&amp;)：二进制编码中，每一位两者都为1，则为1，否则，则为0</li>\n<li>按位或 (|)：二进制编码中，每一位两者其中一个为1，则为1，否则，则为0</li>\n<li>按位非(~)：二进制编码中，每一位的反码，1为0，0为1（十进...</li>\n</ul>",
    "slug": "JS-zhong-wei-cao-zuo",
    "sha": "50c40330555ea317421cc46a84ff4b6fe23f1cc1"
  },
  "react-router2-ge-ji-qiao": {
    "relatedTags": [
      "react",
      "router"
    ],
    "created_at": "2018-11-06",
    "timeArr": [
      2018,
      10,
      6,
      0,
      0,
      0,
      0
    ],
    "title": "react-router2个技巧",
    "uuid": "8f280c8e1286471ef7f34acf52ea54212de93568",
    "summary": "<ol>\n<li><code>SPA</code>的router跳转后立刻回到最顶端</li>\n</ol>\n<p>核心：添加<code>window.scrollTo(0, 0)</code></p>\n<p>可以在每一个<code>Component</code>里面写，也可以包裹<code>Route</code></p>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ScrollToTopRoute</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  componen...</code></pre>",
    "slug": "react-router2-ge-ji-qiao",
    "sha": "557c27da0f9f9270e3a273c2f21a0885dca67e10"
  },
  "ji-lu-CRA-de-webpack-pei-zhi-ceng-jing-de-issue-3": {
    "relatedTags": [
      "webpack",
      "github",
      "react",
      "正则"
    ],
    "created_at": "2018-10-18",
    "timeArr": [
      2018,
      9,
      18,
      0,
      0,
      0,
      0
    ],
    "title": "记录CRA的webpack配置曾经的issue-3",
    "uuid": "f0f5a9f7c1ddeec7f61b8a95cfc5ec817c6bd3fb",
    "summary": "<ul>\n<li><code>terser</code>的配置output</li>\n</ul>\n<pre class=\"hljs\"><code>terserOptions: {\n  ...\n  output: {\n    ...      \n    // Turned on because emoji and regex is not minified properly using default\n    //...</code></pre>",
    "slug": "ji-lu-CRA-de-webpack-pei-zhi-ceng-jing-de-issue-3",
    "sha": "578982e3d37ef324089ae9591f0a39802c74a3a1"
  },
  "React-huo-qu-DOM": {
    "relatedTags": [
      "react"
    ],
    "created_at": "2018-06-08",
    "timeArr": [
      2018,
      5,
      8,
      0,
      0,
      0,
      0
    ],
    "title": "React获取DOM",
    "uuid": "8fb9804dd71b929b0e5256563c63f9d6c48d95b2",
    "summary": "<h4>createRef</h4>\n<p>当 ref 属性在组件时，获取组件实例；当ref属性在dom时，获取dom实例</p>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(props) {\n    <span class=\"hljs-keyword\">super</span>(props);\n\n    <span class=\"hljs-keyword\">this</span>.inp...</code></pre>",
    "slug": "React-huo-qu-DOM",
    "sha": "584a1de3b3d076a60c2ae132c0b6ae9e4451ad42"
  },
  "BST-de-Morris-Traversal-O(1)-bian-li": {
    "relatedTags": [
      "二叉树"
    ],
    "created_at": "2019-01-09",
    "timeArr": [
      2019,
      0,
      9,
      0,
      0,
      0,
      0
    ],
    "title": "BST的Morris Traversal-O(1)遍历",
    "uuid": "6bb049b1a078a0b78387fb4624933c478107281e",
    "summary": "<p>关于二叉树的遍历，使用栈递归或者仿栈循环都是需要<code>O(N)</code>的空间，<code>Morris Traversal</code>保证了空间为<code>O(1)</code>，时间还是<code>O(N)</code>（比原来多了一遍）。</p>\n<p>这里只介绍<code>inOrder</code>顺序。</p>\n<p>思路：</p>\n<p>对每一个<code>cur</code>节点，优先找到一个<code>pre</code>节点，这个<code>pre</code>节点的作用是，当后续<code>cur</code>节...</p>",
    "slug": "BST-de-Morris-Traversal-O(1)-bian-li",
    "sha": "58cf220aadf082c27c39c6bf0db303d77f20ea86"
  },
  "yi-xie-bei-hu-lve-de-js-zhi-shi-1": {
    "relatedTags": null,
    "created_at": "2018-06-22",
    "timeArr": [
      2018,
      5,
      22,
      0,
      0,
      0,
      0
    ],
    "title": "一些被忽略的js知识1",
    "uuid": "7f574c8ed284705a049ad19e6b43a77dbe30c6f2",
    "summary": "<p>一些JS基础(1)</p>\n<h4>硬绑定不会覆盖硬绑定，但new会覆盖硬绑定</h4>\n<ul>\n<li>硬绑定不会覆盖硬绑定</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">show</span>(<span class=\"hljs-params\">s</span>)</span>{\n  <span class=\"hljs-keyword\">this</span>.a=s\n}\n\n<span class=\"hljs-keyword\">var</span> obj1={}\n<span class=\"hljs-keyword\">var</span> obj2={}\n\nshow=show.bind(obj1)\nshow(<span class=\"hljs-number\">5</span>)\nobj1.a  <span class=\"hljs-comment\">// 5</span>\n\nsho...</code></pre>",
    "slug": "yi-xie-bei-hu-lve-de-js-zhi-shi-1",
    "sha": "5965a8eef20c8f12cc64d0794de2cf6b851589a9"
  },
  "hyperapp-patch": {
    "relatedTags": [
      "源码",
      "github"
    ],
    "created_at": "2018-07-02",
    "timeArr": [
      2018,
      6,
      2,
      0,
      0,
      0,
      0
    ],
    "title": "hyperapp-patch",
    "uuid": "ab4d7fd4fc306830807768df35b00d9bc91c9d20",
    "summary": "<h4>hyperapp-patch</h4>\n<p><a href=\"https://github.com/stonehank/sourcecode-analysis/blob/master/source-code.hyperapp/README.md\">完整源码说明注释</a></p>\n<p>patch是hyperapp进行节点更新的核心，主要步骤：</p>\n<ul>\n<li>先判断n...</li>\n</ul>",
    "slug": "hyperapp-patch",
    "sha": "59bb573e47697c7551bfe0191079a8772342b529"
  },
  "shi-yong-git-subtree-he-bing-duo-ge-cang-ku-bing-bao-cun-git-ji-lu": {
    "relatedTags": [
      "git"
    ],
    "created_at": "2018-10-15",
    "timeArr": [
      2018,
      9,
      15,
      0,
      0,
      0,
      0
    ],
    "title": "使用git-subtree合并多个仓库并保存git记录",
    "uuid": "8f18e156230f2d648d08410062a8bf8183c0628e",
    "summary": "<h4>步骤解释：</h4>\n<ol>\n<li>\n<p>创建remote连接\ngit remote add 自定义远程仓库名 远程仓库地址 远程仓库分支</p>\n</li>\n<li>\n<p>添加subtree\ngit subtree add --prefix=当前仓库的子目录名称(可以使用/进行分割)  远程仓库地址 远程仓库分支 &lt;--squash&gt;添加squash则...</p>\n</li>\n</ol>",
    "slug": "shi-yong-git-subtree-he-bing-duo-ge-cang-ku-bing-bao-cun-git-ji-lu",
    "sha": "45b974064ac9411014a451c0abd392f2b223e760"
  },
  "css-bu-que": {
    "relatedTags": [
      "css"
    ],
    "created_at": "2018-07-27",
    "timeArr": [
      2018,
      6,
      27,
      0,
      0,
      0,
      0
    ],
    "title": "css补缺",
    "uuid": "4f7f64522646a72cae1c94073ca8d665ecf77efd",
    "summary": "<h4>@charset</h4>\n<p>@charset 在外部样式表文件内使用。指定该样式表使用的字符编码。</p>\n<pre class=\"hljs\"><code>@charset &quot;utf-8&quot;;\nbody {  }\ndiv {  }\n</code></pre>\n<h4>inline-flex</h4>\n<p>inline-flex和flex 是针对flex容器的内联显示改变，而它内部的flex-item...</p>",
    "slug": "css-bu-que",
    "sha": "4a1043ffaa6c98e2971a83f9fba138ad8462eafa"
  },
  "shen-ru-hai-ming-ju-li": {
    "relatedTags": null,
    "created_at": "2018-08-23",
    "timeArr": [
      2018,
      7,
      23,
      0,
      0,
      0,
      0
    ],
    "title": "深入海明距离",
    "uuid": "a5bed495fbfaa670dcb632ac350bfa5c527e6eca",
    "summary": "<p>通常海明距离的计算使用 <code>^</code>，再计算1的次数</p>\n<p>但如果遇到大量数据，并且需要计算相互的海明距离，这种方法就不合适了，因为每次计算1的次数相对消耗是巨大的</p>\n<p>另一种计算海明距离的方法：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n* <span class=\"hljs-doctag\">@param </span>nums {Array}\n* <span class=\"hljs-doctag\">@returns <span class=\"hljs-type\">{number}</span></span>\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cal</span>...</span></code></pre>",
    "slug": "shen-ru-hai-ming-ju-li",
    "sha": "4a3568d093ea0316f644a973e4b91143b8563bd4"
  },
  "yuan-ma-yue-du-react-waypoint": {
    "relatedTags": [
      "源码",
      "react"
    ],
    "created_at": "2018-12-28",
    "timeArr": [
      2018,
      11,
      28,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-react-waypoint",
    "uuid": "125d2f3de95fae020f190d4c57a5cc55e26a84fd",
    "summary": "<p>流程：</p>\n<ol>\n<li>\n<p>子元素获取</p>\n<p>通过<code>ref</code>获取子元素的<code>DOM</code></p>\n<ul>\n<li>子元素是<code>DOM</code>（最容易获取）</li>\n<li>子元素是组件，尝试通过<code>ForwardRef</code>获取，如果子组件不是<code>ForwardRef</code>，通过<code>innerRef</code>获取</li>\n</ul>\n<p>如果<code>ref</code>获取不到值，将返回（...</p>\n</li>\n</ol>",
    "slug": "yuan-ma-yue-du-react-waypoint",
    "sha": "4b00e3a197c088451f6327743beded39e4aaad11"
  },
  "2-ge-JS-huan-cun-gong-ju-xue-xi-xin-de": {
    "relatedTags": [
      "缓存",
      "源码",
      "性能",
      "github"
    ],
    "created_at": "2018-07-15",
    "timeArr": [
      2018,
      6,
      15,
      0,
      0,
      0,
      0
    ],
    "title": "2个JS缓存工具学习心得",
    "uuid": "a6a06a76f20c9fd24c4954c100dbd016a75a5974",
    "summary": "<h4>nano-memoize 和 fast-memoize</h4>\n<p>首先，这2个工具的实现源码是极其相似的，基本上，只要阅读了其中一个源码，也就了解了另外一个的实现。</p>\n<p>fast-memoize导图：\n![](https://stonehank.github.io/articles/img/fast-memoize.png...</p>",
    "slug": "2-ge-JS-huan-cun-gong-ju-xue-xi-xin-de",
    "sha": "4bdf87c5d346920df9247464ab6b24fdcc7791ab"
  },
  "webpack-dong-tai-import-de-yi-ge-keng": {
    "relatedTags": [
      "webpack"
    ],
    "created_at": "2018-12-22",
    "timeArr": [
      2018,
      11,
      22,
      0,
      0,
      0,
      0
    ],
    "title": "webpack动态import的一个坑",
    "uuid": "eef7e96833e36dd1982a065c2bf4658180ae9581",
    "summary": "<p>调用<code> import()</code>执行动态加载时，如果使用变量模板进行请求，会潜在的请求当前确定的路径下的<strong>所有文件</strong>！</p>\n<p>例如：</p>\n<p>现在有如下文件结构：</p>\n<pre class=\"hljs\"><code>|---asset\n  |---blog\n    |---tech\n      |---001.json\n      |---002.json\n      |-...</code></pre>",
    "slug": "webpack-dong-tai-import-de-yi-ge-keng",
    "sha": "4edeb6d395d6a622ada753d259d16102786a87f9"
  },
  "React-v16.7-Hooks(2)": {
    "relatedTags": [
      "react",
      "缓存"
    ],
    "created_at": "2018-10-31",
    "timeArr": [
      2018,
      9,
      31,
      0,
      0,
      0,
      0
    ],
    "title": "React v16.7 Hooks(2)",
    "uuid": "98dd615567b3aca2beb98ad1d65b71331760149b",
    "summary": "<p><code>useCallback, useMemo, useRef, useImperativeMethods, useMutationEffect, useLayoutEffect</code></p>",
    "slug": "React-v16.7-Hooks(2)",
    "sha": "4f37e4ca6137a17d6454b46239f1712d981ecdc7"
  },
  "redux-observable-bi-ji-1": {
    "relatedTags": [
      "redux",
      "笔记",
      "源码",
      "github"
    ],
    "created_at": "2018-06-12",
    "timeArr": [
      2018,
      5,
      12,
      0,
      0,
      0,
      0
    ],
    "title": "redux-observable笔记1",
    "uuid": "476aa40826f78ed929e4d188e5272ba3b366c415",
    "summary": "<h4>一</h4>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> pingEpic = <span class=\"hljs-function\"><span class=\"hljs-params\">action$</span> =&gt;</span>\n  action$.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">action</span> =&gt;</span> action.type === <span class=\"hljs-string\">'PING'</span>)\n    .mapTo({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'PONG'</span> });\n</code></pre>\n<blockquote>\n<p>pingEpic 会监听类型为 PING 的 actions，然后投...</p>\n</blockquote>",
    "slug": "redux-observable-bi-ji-1",
    "sha": "2c3ca78c66c568c2182c1a0a3db4f01790f268e3"
  },
  "DNS-zhong-bang-ding-gong-ji-ti-shi-dian": {
    "relatedTags": null,
    "created_at": "2018-11-03",
    "timeArr": [
      2018,
      10,
      3,
      0,
      0,
      0,
      0
    ],
    "title": "DNS重绑定攻击-提示点",
    "uuid": "13253a7dee631700da97fcd58ea9765840ae7706",
    "summary": "<p>攻击者需要知道的：</p>\n<ul>\n<li>知道被攻击网站地址</li>\n<li>知道被攻击网站<strong>内部</strong>缺少认证环节</li>\n<li>知道需要请求的(目标)存放在哪个位置</li>\n</ul>\n<p>被攻击这需要做的：</p>\n<ul>\n<li>通过诱导链接访问了恶意网站</li>\n</ul>\n<p>执行关键点</p>\n<ul>\n<li>恶意网站第一次响应DNS为实际DNS，TTL极短，然后执行请求(作用在恶意网站上)。</li>\n<li>恶意网站第二次响应DN...</li>\n</ul>",
    "slug": "DNS-zhong-bang-ding-gong-ji-ti-shi-dian",
    "sha": "2d4b04e1670845ec9792e2d6dbb9a9828db06632"
  },
  "GraphQL-fu-wu-qi-de-jian-yi-shi-xian": {
    "relatedTags": [
      "graphql",
      "babel"
    ],
    "created_at": "2018-11-13",
    "timeArr": [
      2018,
      10,
      13,
      0,
      0,
      0,
      0
    ],
    "title": "GraphQL服务器的简易实现",
    "uuid": "9b5e4a6871e0353c0cbc1f47c9de37eabe73f5da",
    "summary": "<ul>\n<li>\n<p>为什么要实现一个<code>GraphQL</code>服务器</p>\n<p>通过自己实现，更深入了解<code>GraphQL</code>怎么构造，怎么获取，一些术语</p>\n</li>\n<li>\n<p>直接入正题，如何实现一个<code>GraphQL</code>服务器</p>\n<p>了解4种类型</p>\n<ul>\n<li>\n<p>Query</p>\n<p>执行内容查询</p>\n</li>\n<li>\n<p>Muta...</p>\n</li>\n</ul>\n</li>\n</ul>",
    "slug": "GraphQL-fu-wu-qi-de-jian-yi-shi-xian",
    "sha": "2df708b7274da2278a0b10daebf16bf60e8a965f"
  },
  "React.Children": {
    "relatedTags": [
      "react",
      "es6",
      "redux"
    ],
    "created_at": "2018-06-10",
    "timeArr": [
      2018,
      5,
      10,
      0,
      0,
      0,
      0
    ],
    "title": "React.Children",
    "uuid": "07cc2d304f96574c9995198fe6ff05e9fc342322",
    "summary": "<p><code>React.Children</code>和<code>this.props.children</code>都是获取父组件的子元素(子组件)</p>\n<p>this.props.children:</p>\n<ol>\n<li>1个子元素  =&gt; {Object}(React元素(组件)对象)</li>\n<li>多个子元素 =&gt; [{Object},{Object}...]</li>\n<li>无子元素   =...</li>\n</ol>",
    "slug": "React.Children",
    "sha": "30a4f1281825a6b1c904adf8abddc4b886ccbd1a"
  },
  "yi-xie-bei-hu-lve-de-JS-zhi-shi-4": {
    "relatedTags": [
      "es6"
    ],
    "created_at": "2018-07-09",
    "timeArr": [
      2018,
      6,
      9,
      0,
      0,
      0,
      0
    ],
    "title": "一些被忽略的JS知识4",
    "uuid": "fd8492b29dfac9fa4e50c5b2b4926048c19a0553",
    "summary": "<p>一些JS基础(4)</p>\n<h4>按值传递和按引用传递</h4>\n<p>按值传递的例子：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">passByValue</span>(<span class=\"hljs-params\">x</span>)</span>{\n  x=<span class=\"hljs-number\">999</span>\n}\n<span class=\"hljs-keyword\">var</span> a=<span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">var</span> b={<span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">1</span>}\npassByValue(a);\npassByValue(b)\na   <span class=\"hljs-comment\">// 5</span>\nb   <span class=\"hljs-comment\">// {a:1}</span>\n</code></pre>\n<p>按引用传...</p>",
    "slug": "yi-xie-bei-hu-lve-de-JS-zhi-shi-4",
    "sha": "340d5e43659ef754ccb360908ba8d5206f671aab"
  },
  "babel-cha-jian-de-yi-xie-zong-jie": {
    "relatedTags": [
      "babel",
      "ast",
      "性能"
    ],
    "created_at": "2018-09-24",
    "timeArr": [
      2018,
      8,
      24,
      0,
      0,
      0,
      0
    ],
    "title": "babel插件的一些总结",
    "uuid": "ca04d014d61ce50791c49363dae3a3d3ae3b1e54",
    "summary": "<h4>BABLE插件编写一些总结</h4>\n<ol>\n<li>\n<p>babel-plugin总是先于babel-presets执行，但实际上它们是并行执行，因此如果需要编写一个有依赖的babel插件，其实就是\nrace模式。https://jamie.build/babel-plugin-ordering.html</p>\n<p>这么做是为...</p>\n</li>\n</ol>",
    "slug": "babel-cha-jian-de-yi-xie-zong-jie",
    "sha": "35b77bbafb93c7b66d99747c168be81a28ee84aa"
  },
  "guan-yu-jin-qi-shi-yong-reach-router-de-yi-xie-zong-jie": {
    "relatedTags": [
      "router",
      "react"
    ],
    "created_at": "2018-10-11",
    "timeArr": [
      2018,
      9,
      11,
      0,
      0,
      0,
      0
    ],
    "title": "关于近期使用reach-router的一些总结",
    "uuid": "d8bf00a3ca68fe4e1b5c7acde9855e2148c7762f",
    "summary": "<p>reach-router是一个轻量级的router组件，当然功能也相对于react-router少了一些。</p>\n<p>近期使用的时候遇到以下问题，在这里总结一次</p>\n<ol>\n<li>\n<p>router遇到<code>url:parameter</code> ，当无法匹配的情况，默认会一直读取loading组件，因为它不知道这个参数是否有效，</p>\n<p>需要自行判断`...</p>\n</li>\n</ol>",
    "slug": "guan-yu-jin-qi-shi-yong-reach-router-de-yi-xie-zong-jie",
    "sha": "3a57533a3dc20f28769f523891951917242119ad"
  },
  "yi-xie-promise-he-qi-ta-bu-que": {
    "relatedTags": [
      "promise"
    ],
    "created_at": "2018-08-02",
    "timeArr": [
      2018,
      7,
      2,
      0,
      0,
      0,
      0
    ],
    "title": "一些promise和其他补缺",
    "uuid": "e1662cfda83fcae8dc160c993bb54ff04956653c",
    "summary": "<ul>\n<li>如果向 Promise.resolve(..) 传递一个真正的 Promise，就只会返回同一个 promise</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> p1 = <span class=\"hljs-built_in\">Promise</span>.resolve( <span class=\"hljs-number\">42</span> );\n<span class=\"hljs-keyword\">var</span> p2 = <span class=\"hljs-built_in\">Promise</span>.resolve( p1 );\np1===p2\n<span class=\"hljs-comment\">// true</span>\n</code></pre>",
    "slug": "yi-xie-promise-he-qi-ta-bu-que",
    "sha": "3bfb5149de44ae6b02ce78a91414ebbd9303a277"
  },
  "yuan-ma-yue-du-jie-xi-anime-he-xin-(1)": {
    "relatedTags": [
      "源码",
      "css",
      "算法",
      "github",
      "promise"
    ],
    "created_at": "2018-07-20",
    "timeArr": [
      2018,
      6,
      20,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-解析anime核心(1)",
    "uuid": "631c6ad421f436a2f8a59b287261b6a4cdaae80d",
    "summary": "<p>本次解析将分为2篇文章，当前是第一篇，第二篇在<a href=\"./07-21-%E8%A7%A3%E6%9E%90anime%E6%A0%B8%E5%BF%83(2).md\">这里</a></p>\n<p>另外，为了能更好的理解这个库，个人写了一个此库的压缩版，实现了核心的功能(主要也是为了更好理解核心功能)，内容更少方便阅读，\n地址在[这里](https://github.com/stonehank/simpli...</p>",
    "slug": "yuan-ma-yue-du-jie-xi-anime-he-xin-(1)",
    "sha": "2841c2c60ffc45abdca1ed525155f5b777ed54c7"
  },
  "react-transition-group": {
    "relatedTags": [
      "react",
      "csstransition",
      "css"
    ],
    "created_at": "2018-06-20",
    "timeArr": [
      2018,
      5,
      20,
      0,
      0,
      0,
      0
    ],
    "title": "react-transition-group",
    "uuid": "a016c3917edd52dc61593c47a19f112ce3e57081",
    "summary": "<h4>ReactTransitionGroup</h4>\n<h4>Transition</h4>\n<p>默认展示组件某个特定状态的样式，而不是创建渐变动画</p>\n<p>例如：</p>\n<pre class=\"hljs\"><code>&lt;Transition\n        <span class=\"hljs-keyword\">in</span>={toggleShow}\n        timeout={<span class=\"hljs-number\">1000</span>}\n        unmountOnEx...</code></pre>",
    "slug": "react-transition-group",
    "sha": "2c184a72cccb6e8c5cb04541f46eb06b15533efa"
  },
  "fetch-corsVSno-cors": {
    "relatedTags": [
      "cors",
      "worker",
      "缓存"
    ],
    "created_at": "2018-07-12",
    "timeArr": [
      2018,
      6,
      12,
      0,
      0,
      0,
      0
    ],
    "title": "fetch-corsVSno-cors",
    "uuid": "26780522dc2b9dd466ebe91331b58247e5f73627",
    "summary": "<p>A CORS filtered response is a filtered response whose type is &quot;cors&quot;, header list excludes any headers in internal response’s header list whose name is not a CORS-safelisted response-header name, given internal response’s CORS-exposed header-name list, and trailer is empty.</p>",
    "slug": "fetch-corsVSno-cors",
    "sha": "17a85d07a1ae45e6a8f6857bf3c621bfba2bd674"
  },
  "hong-hei-shu-yao-dian-gen-ju-suan-fa-di-4-ban-": {
    "relatedTags": [
      "算法",
      "二叉树"
    ],
    "created_at": "2018-12-10",
    "timeArr": [
      2018,
      11,
      10,
      0,
      0,
      0,
      0
    ],
    "title": "红黑树要点-根据《算法第4版》",
    "uuid": "2bd50bd84bc74d731859ba7d0c3008c8ed84172a",
    "summary": "<h4>规则：</h4>\n<ol>\n<li>原型是<code>2-3树</code></li>\n<li>红链接：相当于<code>2-3树</code>的<code>3节点</code>，红链接中子节点是<code>红色</code>，父节点是<code>黑色</code></li>\n<li>只存在红链接为左链接，发现红链接为右链接需要转换</li>\n<li>当节点为null，也认为是<code>黑色</code></li>\n<li>当插入节点，出现2个左红点相邻(不可能出现2个右红点相邻，因为第3条)，其实就是`...</li>\n</ol>",
    "slug": "hong-hei-shu-yao-dian-gen-ju-suan-fa-di-4-ban-",
    "sha": "18598c17b6c44620cb536b5b1bb6fa7f9f9cd4e4"
  },
  "gao-jie-redux-de-shi-yong": {
    "relatedTags": [
      "redux"
    ],
    "created_at": "2018-06-25",
    "timeArr": [
      2018,
      5,
      25,
      0,
      0,
      0,
      0
    ],
    "title": "高阶redux的使用",
    "uuid": "0c096d72d4add9e9c5b5fcc24624e4c8d6669aec",
    "summary": "<p>###3 Redux的复用</p>\n<p>因为每一次dispatch都是遍历所有reducer寻找type，因此每一个action的type不能一致，\n当需要复用reducer时，可以使用prefix</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">generateReducer</span>(<span class=\"hljs-params\">prefix,state</span>)</span>{\n  <span class=\"hljs-keyword\">const</span> SOMETYPE=pr...</code></pre>",
    "slug": "gao-jie-redux-de-shi-yong",
    "sha": "1a051b70892a766030ca8e55ac15f3c3fbb2d887"
  },
  "threejs-chu-ti-yan-zheng-ti-gai-nian": {
    "relatedTags": [
      "threejs",
      "算法"
    ],
    "created_at": "2021-06-14",
    "timeArr": [
      2021,
      5,
      14,
      0,
      0,
      0,
      0
    ],
    "title": "threejs初体验-整体概念",
    "uuid": "c9d2906be991ddcca334e52c1e30df138469d970",
    "summary": "<p><code>threejs</code>初体验，关于<code>3D</code>渲染，自然会涉及到大量数学计算，算法公式，但这些<code>threejs</code>已经封装了，直接调用<code>API</code>即可完成大量工作。</p>\n<p><code>threejs</code>用右手坐标系，即上<code>y</code>，右<code>x</code>，<code>z</code>轴从屏幕里到外</p>\n<p><code>3D</code>渲染涉及概念</p>\n<ol>\n<li>场景</li>\n</ol>\n<p>指你想展示给别人看到东西总称，你想展示，需要添加...</p>",
    "slug": "threejs-chu-ti-yan-zheng-ti-gai-nian",
    "sha": "1bad457ab7f56d2fb13f92b70c3c3a7f2e14584a"
  },
  "yuan-ma-yue-du-xue-xi-redux-de-compose": {
    "relatedTags": [
      "源码",
      "redux"
    ],
    "created_at": "2018-06-13",
    "timeArr": [
      2018,
      5,
      13,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-学习redux的compose",
    "uuid": "bc4cf19b8dcd0b9fd7c436d8de5961ecf9099175",
    "summary": "<p>先上源码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 将(fun1,fun2,fun3)转换成fun1(fun2(fun3()))</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compose</span>(<span class=\"hljs-params\">...funcs</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (funcs.length === <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">arg</span> =&gt;</span> arg\n  }\n\n  <span class=\"hljs-keyword\">if</span> (f...</code></pre>",
    "slug": "yuan-ma-yue-du-xue-xi-redux-de-compose",
    "sha": "1c31d66483e93c9656f2d42ae1164c3b016501b8"
  },
  "yi-ge-guan-yu-GIT-che-xiao-he-bing-de-chu-li-revert": {
    "relatedTags": [
      "git"
    ],
    "created_at": "2018-09-01",
    "timeArr": [
      2018,
      8,
      1,
      0,
      0,
      0,
      0
    ],
    "title": "一个关于GIT撤销合并的处理revert",
    "uuid": "c717f697562ea9e27b08040a52e05db0718b1a50",
    "summary": "<pre class=\"hljs\"><code>init -&gt; v1 -&gt; v2 -&gt; v3 -- faulty merge -&gt; v4  (master)\n           \\            /                     \n            d1  --&gt;  d2                               ...</code></pre>",
    "slug": "yi-ge-guan-yu-GIT-che-xiao-he-bing-de-chu-li-revert",
    "sha": "1de2e1722337b507aecf967ac8e888cae31f7bbb"
  },
  "WeakMap-li-jie-bi-ji": {
    "relatedTags": [
      "笔记"
    ],
    "created_at": "2018-11-17",
    "timeArr": [
      2018,
      10,
      17,
      0,
      0,
      0,
      0
    ],
    "title": "WeakMap理解笔记",
    "uuid": "f559d47fb4cf8cfa9bfb2bd0d9bba58e079f66ec",
    "summary": "<h4>WeakMap</h4>\n<ul>\n<li>\n<p>键是弱引用</p>\n<p>如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象是否还在该弱引用的结构中</p>\n</li>\n</ul>\n<p>因此，键一旦丢失，再也无法获取内容</p>\n<ol>\n<li>必须使用对象作为键，当对象引用消失，自动清除</li>\n<li>必须通过键去获取内容</li>\n</ol>\n<p>只要保管好 key ，它就是...</p>",
    "slug": "WeakMap-li-jie-bi-ji",
    "sha": "200fdba2077d822ff14086c8249fb87383fb32dc"
  },
  "zhuan-ma-Hash-jia-mi-hun-xiao-qu-bie-zong-jie": {
    "relatedTags": [
      "算法"
    ],
    "created_at": "2018-07-04",
    "timeArr": [
      2018,
      6,
      4,
      0,
      0,
      0,
      0
    ],
    "title": "转码,Hash,加密,混淆区别总结",
    "uuid": "c177754811a4f2e83d02b2906306ad34211a38a7",
    "summary": "<ul>\n<li>\n<p>编码</p>\n<p>转换数据格式使其能被各种系统执行，算法公开</p>\n</li>\n<li>\n<p>hash</p>\n<p>一个多对一的转换，不可逆，长度固定，用于检测文件是否有改动</p>\n<p>四个特性：</p>\n<ol>\n<li>输入相同，输出一定相同</li>\n<li>绝大部分不同的输入不应该产生相同的输出</li>\n<li>输入到输出行为不可逆\n4....</li>\n</ol>\n</li>\n</ul>",
    "slug": "zhuan-ma-Hash-jia-mi-hun-xiao-qu-bie-zong-jie",
    "sha": "22a37b52e29256c6227488765b3c7bae7216c9d5"
  },
  "React-v16.7-Hooks(3)": {
    "relatedTags": [
      "react",
      "redux"
    ],
    "created_at": "2018-11-08",
    "timeArr": [
      2018,
      10,
      8,
      0,
      0,
      0,
      0
    ],
    "title": "React v16.7 Hooks(3)",
    "uuid": "fc7c450a8aab31c939be77ef556ba927f8da6619",
    "summary": "<p>useReducer</p>\n<p>模拟reducer</p>\n<p><code>const [state, dispatch] = useReducer(reducer, initialState, initialAction);</code></p>\n<ul>\n<li>参数1<code>reducer</code></li>\n</ul>\n<p>与<code>redux</code>写法相比，不需要默认返回值</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">red</span>...</span></code></pre>",
    "slug": "React-v16.7-Hooks(3)",
    "sha": "012abf1ae3a9d2bef888109e1147dae1407eda09"
  },
  "wei-lai-JS-xin-bian-hua-3-ge": {
    "relatedTags": null,
    "created_at": "2018-06-23",
    "timeArr": [
      2018,
      5,
      23,
      0,
      0,
      0,
      0
    ],
    "title": "未来JS新变化3个",
    "uuid": "19eb833c0872c308711633143c73c05509c956cd",
    "summary": "<blockquote>\n<p>ES</p>\n</blockquote>\n<h4>变化1：</h4>\n<p>原写法：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> data = {\n  <span class=\"hljs-attr\">user</span>: {},\n};\n<span class=\"hljs-keyword\">const</span> street = data &amp;&amp; data.user &amp;&amp; data.user.address &amp;&amp; data.user.address.street;\n<span class=\"hljs-built_in\">console</span>.log(data.use...</code></pre>",
    "slug": "wei-lai-JS-xin-bian-hua-3-ge",
    "sha": "026909510ca57f701c4dfaa8c73e5cae0f6caab1"
  },
  "React-de-Strict-Mode": {
    "relatedTags": [
      "react",
      "github"
    ],
    "created_at": "2018-10-30",
    "timeArr": [
      2018,
      9,
      30,
      0,
      0,
      0,
      0
    ],
    "title": "React的Strict Mode",
    "uuid": "8cf3eb3203db34468cc1b1507b0c244e16cbf3ab",
    "summary": "<h4>Strict Mode</h4>\n<p>在React v16.3时添加，目的是帮助找出应用中潜在的问题。</p>\n<p>使用：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ExampleApplication</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    &lt;div&gt;\n      &lt;Header /&gt;...</code></pre>",
    "slug": "React-de-Strict-Mode",
    "sha": "041680b86309bc84db432c597afbaf572d179c1f"
  },
  "React-Fiber-jian-shu": {
    "relatedTags": [
      "react"
    ],
    "created_at": "2018-11-28",
    "timeArr": [
      2018,
      10,
      28,
      0,
      0,
      0,
      0
    ],
    "title": "React-Fiber简述",
    "uuid": "b1f5ca61aa11b54e8e854bd3c67096d01428d37b",
    "summary": "<p><code>Fiber</code>可以看成一种数据结构，它内部包含了对当前组件的行为，包括对组件行为的跟踪、安排、暂停和取消。</p>",
    "slug": "React-Fiber-jian-shu",
    "sha": "0577a959c7299927efbe8e15eb104f1a45ad84ee"
  },
  "yuan-ma-yue-du-create-react-app-yi-xie-shou-huo-(-bi-ji-bei-wang-)": {
    "relatedTags": [
      "react",
      "源码",
      "笔记",
      "npm",
      "github"
    ],
    "created_at": "2018-07-28",
    "timeArr": [
      2018,
      6,
      28,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-create-react-app一些收获(笔记备忘)",
    "uuid": "f433b9ed4007a7781ed42e23c229928ae08ba1d8",
    "summary": "<p>A string constant defining the operating system-specific end-of-line marker:</p>",
    "slug": "yuan-ma-yue-du-create-react-app-yi-xie-shou-huo-(-bi-ji-bei-wang-)",
    "sha": "0a29b597ea9aca0631c7bd70092eb31cf07d8250"
  },
  "Canvas-diao-yong-clearRect-wu-fa-qing-chu-de-jie-jue-fang-an": {
    "relatedTags": [
      "canvas"
    ],
    "created_at": "2019-07-10",
    "timeArr": [
      2019,
      6,
      10,
      0,
      0,
      0,
      0
    ],
    "title": "Canvas调用clearRect无法清除的解决方案",
    "uuid": "617347c3dd758ed8c49bf011e3ff8d354a6cc190",
    "summary": "<p>有时候在执行<code>ctx.clearRect</code>时，并不能清除图片，但通过控制台调试却没有任何问题。</p>\n<p>通常这发生在调用了例如：<code>lineTo(), arc(), rect()</code>等等，然后执行<code>stroke()</code>或者<code>fill()</code>；</p>\n<p>这可能是因为我们在绘制路径时并没有调用<code>beginPath()</code>，这导致路径的绘制将储存...</p>",
    "slug": "Canvas-diao-yong-clearRect-wu-fa-qing-chu-de-jie-jue-fang-an",
    "sha": "0f2e7a7c503d0890c669f8263054b37e4ce2f1e2"
  },
  "zheng-ze-yi-lou-dian": {
    "relatedTags": [
      "正则"
    ],
    "created_at": "2018-07-11",
    "timeArr": [
      2018,
      6,
      11,
      0,
      0,
      0,
      0
    ],
    "title": "正则遗漏点",
    "uuid": "5fc1f9d14abff5f33e3b3a286fadfe82ad9a48b2",
    "summary": "<h4>正则 exec和match</h4>\n<ul>\n<li>都是返回数组，包括小括号内部</li>\n<li>非全局 一致</li>\n<li>match全局，匹配多个值</li>\n<li>exec全局，匹配单个值，但每次执行会继续从上一次匹配数据之后开始</li>\n</ul>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span> str=<span class=\"hljs-string\">'this is a stick'</span>\n\n<span class=\"hljs-keyword\">let</span> reg=<span class=\"hljs-regexp\">/.is/</span>\nreg.exec(str)   /...</code></pre>",
    "slug": "zheng-ze-yi-lou-dian",
    "sha": "150a56b6eb7cd88a1e0662000a7a8f23e0c8003a"
  },
  "pei-zhi-Larvael8-wen-ti-ji-lu": {
    "relatedTags": [
      "vue",
      "webpack",
      "npm",
      "git"
    ],
    "created_at": "2021-08-09",
    "timeArr": [
      2021,
      7,
      9,
      0,
      0,
      0,
      0
    ],
    "title": "配置Larvael8问题记录",
    "uuid": "e0183343ceb8acf22211aa4b6df0a043841fcdbe",
    "summary": "<p>lcobucci/jwt 4.1.4 requires ext-sodium * -&gt; the requested PHP extension sodium is missing from your system.</p>",
    "slug": "pei-zhi-Larvael8-wen-ti-ji-lu",
    "sha": "db56556d07b55c00d61de20b7c057a7ad0c1e236"
  },
  "single-spa-wei-qian-duan-de-lu-you-guan-li-xi-tong": {
    "relatedTags": [
      "react",
      "vue",
      "router",
      "webpack",
      "promise"
    ],
    "created_at": "2021-06-07",
    "timeArr": [
      2021,
      5,
      7,
      0,
      0,
      0,
      0
    ],
    "title": "single-spa-微前端的路由管理系统",
    "uuid": "386fc98fbb6d77826458755f0e09b60919b215bc",
    "summary": "<p><code>single-spa</code>一个页面路由管理工具，当一个页面存在多个框架<code>React</code>, <code>Vue</code>, <code>Angular</code>等等时，单个框架路由已经不能适用，需要一个纯粹的<code>js</code>路由进行管理。</p>\n<h4>项目结构：</h4>\n<pre class=\"hljs\"><code>├── index.js\n├── react-blog\n|  ├── ...other files...</code></pre>",
    "slug": "single-spa-wei-qian-duan-de-lu-you-guan-li-xi-tong",
    "sha": "68aa212db545b2cf71c29d34fbbce9f30fe3e228"
  },
  "yuan-ma-yue-du-pubsub-js": {
    "relatedTags": [
      "源码"
    ],
    "created_at": "2021-07-04",
    "timeArr": [
      2021,
      6,
      4,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-pubsub-js",
    "uuid": "c25645355b6dce51d5f91ed9b939fbd7ebe06b10",
    "summary": "<p>pubsub-js: 一个用 JavaScript 编写的<code>基于主题</code>的发布/订阅库</p>",
    "slug": "yuan-ma-yue-du-pubsub-js",
    "sha": "be93b5efb118c66f3435d9e3e61ac32f3af7211a"
  },
  "python-zhong-np.random.randint-he-np.random.rand": {
    "relatedTags": [
      "python"
    ],
    "created_at": "2021-06-23",
    "timeArr": [
      2021,
      5,
      23,
      0,
      0,
      0,
      0
    ],
    "title": "python中np.random.randint和np.random.rand",
    "uuid": "69da2e3ca5800f073b160c6e0c7a8d842ca7209a",
    "summary": "<p><code>np.random.randint</code>函数的作用是，返回一个随机整型数，范围从低（包括）到高（不包括），即[low, high)。\n如果没有写参数high的值，则返回[0,low)的值。</p>\n<p>参数如下：</p>\n<ul>\n<li>low: int<br>\n生成的数值最低要大于等于low。<br>\n（hign = None时，生成的数值要在[...</li>\n</ul>",
    "slug": "python-zhong-np.random.randint-he-np.random.rand",
    "sha": "e3f445d6ec3ac5ef8575d52929213c9491266c5d"
  },
  "python-zhong-np.random.choice-yong-fa": {
    "relatedTags": [
      "python"
    ],
    "created_at": "2021-06-23",
    "timeArr": [
      2021,
      5,
      23,
      0,
      0,
      0,
      0
    ],
    "title": "python中np.random.choice用法",
    "uuid": "b4315c63d7a7179f31a5a4701339c88c9db60367",
    "summary": "<p>原文链接：https://blog.csdn.net/ImwaterP/article/details/96282230</p>\n<p>处理数据时经常需要从数组中随机抽取元素，这时候就需要用到np.random.choice()。然而choice用法的官方解释并不详细，尤其是对replace参数的解释，例子也不是很全面。因此经...</p>",
    "slug": "python-zhong-np.random.choice-yong-fa",
    "sha": "70e068f0c4b30d8c9c32f4cb05469a984c554dd8"
  },
  "threejs-chuang-jian-jian-dan-dong-hua": {
    "relatedTags": [
      "threejs"
    ],
    "created_at": "2021-06-16",
    "timeArr": [
      2021,
      5,
      16,
      0,
      0,
      0,
      0
    ],
    "title": "threejs创建简单动画",
    "uuid": "02dc5ff17ce497cd5ef29f8b41b9a3ff1ff423eb",
    "summary": "<p>当创建出一个物体，我们想给他加点动画</p>\n<p><code>threejs</code>的物体包含了<code>rotation</code>控制旋转，<code>position</code>和<code>translateOnAxis</code>控制位置</p>\n<pre class=\"hljs\"><code>obj.rotation.set(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)\nobj.position.set(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)\nobj.translateOnAxis(<span class=\"hljs-string\">'x...</span></code></pre>",
    "slug": "threejs-chuang-jian-jian-dan-dong-hua",
    "sha": "d2589656b12b3d6306e6652e24d6e97818213bf5"
  },
  "redux-de-ya-zi-lei-xing": {
    "relatedTags": [
      "redux",
      "npm",
      "性能"
    ],
    "created_at": "2018-06-15",
    "timeArr": [
      2018,
      5,
      15,
      0,
      0,
      0,
      0
    ],
    "title": "redux的鸭子类型",
    "uuid": "4a83e73cdbfb044bbcaeec9d58a931ead5069ff7",
    "summary": "<ul>\n<li>之前的项目架构写法</li>\n</ul>\n<pre class=\"hljs\"><code>product/\n├── product.js\n├── constant.js\n├── productActions.js\n├── productReducers.js\n...\nwidget/\n├── widget.js\n├── constant.js\n├── widgetActions...</code></pre>",
    "slug": "redux-de-ya-zi-lei-xing",
    "sha": "fb8d734075bef018a7449f06ddd06ffbb203848f"
  },
  "React-v16.7-Hooks(1)": {
    "relatedTags": [
      "react"
    ],
    "created_at": "2018-10-29",
    "timeArr": [
      2018,
      9,
      29,
      0,
      0,
      0,
      0
    ],
    "title": "React v16.7 Hooks(1)",
    "uuid": "f38c0d6abc75ce713d9bcd733aa66d5097d25e56",
    "summary": "<h4>Hooks</h4>\n<p><code>useState, useEffect, useContext</code></p>",
    "slug": "React-v16.7-Hooks(1)",
    "sha": "fc32341fa1074291a622a829343b7b8a33955b7c"
  },
  "reactComponent.displayName": {
    "relatedTags": [
      "react"
    ],
    "created_at": "2018-06-16",
    "timeArr": [
      2018,
      5,
      16,
      0,
      0,
      0,
      0
    ],
    "title": "reactComponent.displayName",
    "uuid": "518351f05dc93d811b1d88f9c35718525adb0e07",
    "summary": "<p><code>displayName</code>定义调试时的组件name，例如：</p>\n<pre class=\"hljs\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">withHOC</span>(<span class=\"hljs-params\">WrapComponent</span>) </span>{\n   <span class=\"hljs-comment\">// 此处未定义名称或者希望动态定义名称</span>\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n     <span class=\"hljs-comment\">// 定义displayName</span>\n...</code></pre>",
    "slug": "reactComponent.displayName",
    "sha": "fde82993f585c209a25f00c57ea4fb1713626d27"
  },
  "tu-jie-Http-da-gang-bi-ji-(3)": {
    "relatedTags": [
      "笔记",
      "表单"
    ],
    "created_at": "2018-11-29",
    "timeArr": [
      2018,
      10,
      29,
      0,
      0,
      0,
      0
    ],
    "title": "图解Http大纲笔记(3)",
    "uuid": "b0662d8a00fca2a154662ad07955d8c807636c91",
    "summary": "<p>HTTP的瓶颈</p>\n<ul>\n<li>一条连接上只可发送一个请求。</li>\n<li>请求只能从客户端开始。客户端不可以接收除响应以外的指令。</li>\n<li>请求 / 响应首部未经压缩就发送。首部信息越多延迟越大。</li>\n<li>发送冗长的首部。每次互相发送相同的首部造成的浪费较多。</li>\n<li>可任意选择数据压缩格式。非强制压缩发送。</li>\n</ul>\n<p>解决方法：</p>\n<ol>\n<li>Ajax (局部...</li>\n</ol>",
    "slug": "tu-jie-Http-da-gang-bi-ji-(3)",
    "sha": "fe5b6414904c9b660ed09bb3304c04df11fe2d88"
  },
  "yuan-ma-yue-du-signature_pad": {
    "relatedTags": [
      "源码",
      "算法",
      "canvas",
      "github",
      "性能"
    ],
    "created_at": "2019-06-18",
    "timeArr": [
      2019,
      5,
      18,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-signature_pad",
    "uuid": "70c0ac44839743166637d895a36548085cbfc645",
    "summary": "<p><a href=\"https://github.com/szimek/signature_pad\">signature_pad</a>一个基于Canvas的平滑手写画板工具</p>",
    "slug": "yuan-ma-yue-du-signature_pad",
    "sha": "feecc3d4a25186c780dc6453dc129b62bca69809"
  },
  "chu-li-e-wai-fu-za-ren-wu-de-3-zhong-fang-shi": {
    "relatedTags": [
      "worker",
      "promise",
      "github",
      "性能"
    ],
    "created_at": "2018-07-16",
    "timeArr": [
      2018,
      6,
      16,
      0,
      0,
      0,
      0
    ],
    "title": "处理额外复杂任务的3种方式",
    "uuid": "54ce9f8dc0d7064cd42d8c9ee6a7138966a00888",
    "summary": "<h4>web worker VS idleRequestCallback VS setTimeout</h4>\n<p><em><strong>测试平台：FireFox</strong></em>(Chrome嵌套worker会有<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=31666\">bug</a>)</p>\n<p>|*方法...</p>",
    "slug": "chu-li-e-wai-fu-za-ren-wu-de-3-zhong-fang-shi",
    "sha": "f28cf454576cd104bf798125e2ecfc91945fc1cf"
  },
  "yuan-ma-yue-du-redux-yuan-ma-yi-ge-xiao-ji-qiao": {
    "relatedTags": [
      "源码",
      "redux"
    ],
    "created_at": "2018-06-14",
    "timeArr": [
      2018,
      5,
      14,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-redux源码一个小技巧",
    "uuid": "69fe426e6a96922cdf337f974413968848ec6076",
    "summary": "<p>先上源码：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">applyMiddleware</span>(<span class=\"hljs-params\">...middlewares</span>) </span>{\n  <span class=\"hljs-comment\">// ...</span>\n  \n  <span class=\"hljs-keyword\">let</span> dispatch = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(\n    <span class=\"hljs-string\">`Dispatching while construct...</span></code></pre>",
    "slug": "yuan-ma-yue-du-redux-yuan-ma-yi-ge-xiao-ji-qiao",
    "sha": "f2bdc7f7ed9f3d78acc23221e83c625f7b8568f8"
  },
  "tong-guo-blob-shi-xian-wen-jian-xu-chuan-ji-lu-(nodejs)": {
    "relatedTags": [
      "github",
      "表单"
    ],
    "created_at": "2018-07-26",
    "timeArr": [
      2018,
      6,
      26,
      0,
      0,
      0,
      0
    ],
    "title": "通过blob实现文件续传记录(nodejs)",
    "uuid": "46e9b0a650dba0fd4351e6b9b36a76775bb0bc76",
    "summary": "<h4>一个可暂停分段上传的例子</h4>\n<p><a href=\"https://gist.github.com/stonehank/5d3dea234ac6bc200bdef9c181c0a645\">代码位置</a></p>",
    "slug": "tong-guo-blob-shi-xian-wen-jian-xu-chuan-ji-lu-(nodejs)",
    "sha": "f3a86b01ae6164f031e648596d9eeafb87fb28f6"
  },
  "wen-zhang-ji-lu-wei-shen-mo-yao-zhi-dao-js-de-yin-qing-ru-he-gong-zuo": {
    "relatedTags": [
      "缓存",
      "性能"
    ],
    "created_at": "2018-09-08",
    "timeArr": [
      2018,
      8,
      8,
      0,
      0,
      0,
      0
    ],
    "title": "文章记录—为什么要知道js的引擎如何工作",
    "uuid": "1ce699882ae4c19377061e00fa95e2bc41b3f185",
    "summary": "<p>原文：[https://medium.freecodecamp.org/javascript-essentials-why-you-should-know-how-the-engine-works-c2cc0d321553](https://medium.freecodecamp.org/javascript-ess...</p>",
    "slug": "wen-zhang-ji-lu-wei-shen-mo-yao-zhi-dao-js-de-yin-qing-ru-he-gong-zuo",
    "sha": "f6d88502864f6fa2ddb9fd4f3a6d78cbd5bc29c5"
  },
  "React.cloneElement": {
    "relatedTags": [
      "react"
    ],
    "created_at": "2018-06-11",
    "timeArr": [
      2018,
      5,
      11,
      0,
      0,
      0,
      0
    ],
    "title": "React.cloneElement",
    "uuid": "9fc02f51e144eb4dc14889a72398e5a21ee05145",
    "summary": "<pre class=\"hljs\"><code>React.cloneElement(\n  element,\n  [props],\n  [...children]\n)\n</code></pre>\n<h4>第一个参数：element</h4>\n<p>必须是一个存在的React组件或者原生DOM，以下都可以</p>\n<p><code>React.cloneElement(&lt;div /&gt;)</code>\n`React.clon...</p>",
    "slug": "React.cloneElement",
    "sha": "f758381282764ccf2eeb5e222145b6ab40de7d78"
  },
  "bian-ma-jia-mi-ha-xi-hun-xiao-bu-tong-dian-wen-zhang-fan-yi": {
    "relatedTags": [
      "算法"
    ],
    "created_at": "2018-07-04",
    "timeArr": [
      2018,
      6,
      4,
      0,
      0,
      0,
      0
    ],
    "title": "编码-加密-哈希-混淆不同点-文章翻译",
    "uuid": "e3c935001e875147dac6c7b68d6d86f7cfb78754",
    "summary": "<p><a href=\"https://danielmiessler.com/study/encoding-encryption-hashing-obfuscation/\">原文阅读</a></p>\n<p>![js_obfuscation](https://stonehank.github.io/articles/img/js_obfuscation.png...</p>",
    "slug": "bian-ma-jia-mi-ha-xi-hun-xiao-bu-tong-dian-wen-zhang-fan-yi",
    "sha": "e315fbb406b0f3100dfcf4ec5b7ebb7fc1f41a83"
  },
  "service-worker-yao-dian-gai-kuo": {
    "relatedTags": [
      "worker",
      "promise",
      "缓存"
    ],
    "created_at": "2018-09-26",
    "timeArr": [
      2018,
      8,
      26,
      0,
      0,
      0,
      0
    ],
    "title": "service-worker要点概括",
    "uuid": "39277c1a6e1a6c2280d116793ed086ee2507fa7e",
    "summary": "<p>service worker和cache</p>\n<p>客户端：register</p>\n<p>服务端：install, activate, fetch</p>\n<ul>\n<li><code>install</code></li>\n</ul>\n<p>主要作用是内部回调中的参数<code>event</code>的方法<code>event.waitUntil</code>中缓存本次的资源。</p>\n<ul>\n<li><code>activate</code></li>\n</ul>\n<p>主要作用是在内部回调中的参数`e...</p>",
    "slug": "service-worker-yao-dian-gai-kuo",
    "sha": "e35e017c1e99651fcf6cabf2e7873c3ad59e795c"
  },
  "canvas-chu-li-da-liang-chong-fu-yun-dong": {
    "relatedTags": [
      "canvas"
    ],
    "created_at": "2018-08-20",
    "timeArr": [
      2018,
      7,
      20,
      0,
      0,
      0,
      0
    ],
    "title": "canvas处理大量重复运动",
    "uuid": "7d330d0cc2eaff951ab1a45bc216f483c483f6e0",
    "summary": "<p>canvas做大量重复的粒子运动，例如雪花，星光闪烁</p>\n<p>并不需要针对每一个粒子进行动画，例如</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;particles,length;i++){\n  <span class=\"hljs-keyword\">let</span> p=particles[i]\n  ctx.beginPath()\n  ctx.fillStyle=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{}\n  ...</code></pre>",
    "slug": "canvas-chu-li-da-liang-chong-fu-yun-dong",
    "sha": "e43ef69f83c35b3fbffbb984a2b1c56c4c7db591"
  },
  "ji-lu-yi-ci-Travis-gou-jian-qian-hou-liu-cheng": {
    "relatedTags": [
      "git",
      "github",
      "npm"
    ],
    "created_at": "2018-10-21",
    "timeArr": [
      2018,
      9,
      21,
      0,
      0,
      0,
      0
    ],
    "title": "记录一次Travis构建前后流程",
    "uuid": "34a2842eae3595228bf0ac5e118a4db4df7b7344",
    "summary": "<p>环境：3个文件夹</p>\n<ul>\n<li>blogs 用于写博客</li>\n<li>create-my-blog 用于获取博客内容和创建静态博客页面</li>\n<li>stonehank.github.io 用于展示博客</li>\n</ul>\n<p>造成文件夹比较繁杂是因为当时写的时候并没有想去在github做一个博客页面。</p>\n<p>自动构建前的流程：</p>\n<p>|—blogs</p>\n<p><code>git commit</code>...</p>",
    "slug": "ji-lu-yi-ci-Travis-gou-jian-qian-hou-liu-cheng",
    "sha": "e8224d6946122b6d3062e3637631d9202e32bd4c"
  },
  "chao-jian-jie-1kb-kuang-jia-hyperapp": {
    "relatedTags": [
      "源码",
      "github",
      "react"
    ],
    "created_at": "2018-07-01",
    "timeArr": [
      2018,
      6,
      1,
      0,
      0,
      0,
      0
    ],
    "title": "超简洁1kb框架-hyperapp",
    "uuid": "041e14e2880378f2920fae48877b46694fbfc26d",
    "summary": "<h4>hyperapp框架</h4>\n<p><a href=\"https://github.com/stonehank/sourcecode-analysis/blob/master/source-code.hyperapp/README.md\">完整源码说明注释</a></p>\n<p>一个极小的类react框架，也是通过 Virtual DOM对节点进行对比（通过...</p>",
    "slug": "chao-jian-jie-1kb-kuang-jia-hyperapp",
    "sha": "ec662a13e128b776e46f1ef9ec3fdaa63e0d7381"
  },
  "reselect": {
    "relatedTags": [
      "缓存",
      "redux",
      "github"
    ],
    "created_at": "2018-06-28",
    "timeArr": [
      2018,
      5,
      28,
      0,
      0,
      0,
      0
    ],
    "title": "reselect",
    "uuid": "e28099171dfe31f2da457cda1c3b45aac1715cd2",
    "summary": "<h4>Reselect</h4>\n<p>当我们使用redux的<code>connect(mapStateToProps)</code>的时候</p>\n<p>有时候store的数据直接传进组件并不好，于是我们希望在将数据传进组件前，进行调整</p>\n<p>例如 store如下</p>\n<pre class=\"hljs\"><code>const mockStore={\n  descriptions:[\n    {name:&quot;a...</code></pre>",
    "slug": "reselect",
    "sha": "f0d4f2e822ae9afefb2da674e748cd479eef8231"
  },
  "yuan-ma-yue-du-react-snapshot": {
    "relatedTags": [
      "react",
      "源码",
      "webpack",
      "正则"
    ],
    "created_at": "2018-12-03",
    "timeArr": [
      2018,
      11,
      3,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-react-snapshot",
    "uuid": "1c4e38c3c8cdea68cde83fbec5fb641f85a0c066",
    "summary": "<p><code>react-snapshot</code>一个用于react服务端渲染的工具，并没有使用<code>react V16+</code>的<code>hydrate</code>，但也能学到一些东西</p>",
    "slug": "yuan-ma-yue-du-react-snapshot",
    "sha": "d568476c4e1852e8b6439b1bc26f6ea8435bf4bc"
  },
  "yuan-ma-yue-du-reach-router-yuan-ma-xue-xi-dao-de-3": {
    "relatedTags": [
      "源码",
      "router",
      "promise",
      "算法"
    ],
    "created_at": "2018-07-07",
    "timeArr": [
      2018,
      6,
      7,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-reach-router源码学习到的3",
    "uuid": "94269872739a3bce7b949811a96155420826e1bd",
    "summary": "<p>All Consumers that are descendants of a Provider will re-render whenever the Provider’s value prop changes.\nThe propagation from Provider to its descendant Consumers is not subject to the shouldComponentUpdate method,\nso the Consumer is updated even when an ancestor component bails out of the update.</p>",
    "slug": "yuan-ma-yue-du-reach-router-yuan-ma-xue-xi-dao-de-3",
    "sha": "d91847cb95128b4df27dc580f59ae7f12b7a6af8"
  },
  "yi-xie-bei-hu-lve-de-js-zhi-shi-2": {
    "relatedTags": null,
    "created_at": "2018-06-24",
    "timeArr": [
      2018,
      5,
      24,
      0,
      0,
      0,
      0
    ],
    "title": "一些被忽略的js知识2",
    "uuid": "cfe39dfd0c96a8f6a8263f7275c5d9f94c1a0480",
    "summary": "<p>一些JS基础(2)</p>\n<h4>Object对象的key</h4>\n<p>一般来说，obj的key属性会自动转换成字符串（调用默认toString方法），然后再读取</p>\n<p>例如：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> myObject = { };\nmyObject[<span class=\"hljs-literal\">true</span>] = <span class=\"hljs-string\">\"foo\"</span>;\nmyObject[<span class=\"hljs-number\">3</span>] = <span class=\"hljs-string\">\"bar\"</span>;\n\nmyObjec...</code></pre>",
    "slug": "yi-xie-bei-hu-lve-de-js-zhi-shi-2",
    "sha": "d923bf5ea77aeead80931e8ae800e2382bec4caf"
  },
  "KMP-hui-su-fen-xi": {
    "relatedTags": [
      "算法"
    ],
    "created_at": "2018-08-09",
    "timeArr": [
      2018,
      7,
      9,
      0,
      0,
      0,
      0
    ],
    "title": "KMP回溯分析",
    "uuid": "d19b06a421c09a6a7e3d012ce39d42cf0cfc380b",
    "summary": "<p>KMP算法中，当对应的字符不匹配时，需要对前一个索引进行回溯</p>\n<p>一般写法是：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">calcNext</span>(<span class=\"hljs-params\">str,pat</span>)</span>{\n  <span class=\"hljs-comment\">/*...*/</span>\n  <span class=\"hljs-keyword\">if</span>(str[k]!==str[j]){\n    <span class=\"hljs-comment\">// 有些会写成k=next[k]，原理是一样的</span>\n    <span class=\"hljs-comment\">// 这里k表示，所对应当前正在进行对比的...</span></code></pre>",
    "slug": "KMP-hui-su-fen-xi",
    "sha": "dcb12fd298b9d963db9b1d4b12cbff7da94227bc"
  },
  "js-kuan-song-bi-jiao-gui-fan": {
    "relatedTags": [
      "规范"
    ],
    "created_at": "2018-07-10",
    "timeArr": [
      2018,
      6,
      10,
      0,
      0,
      0,
      0
    ],
    "title": "js宽松比较规范",
    "uuid": "a0f124d6d5ccb06205fe4c0fcfcff8dd9fb16d44",
    "summary": "<p>ES5 规范 11.9.3.4-5 这样定义：</p>\n<ol>\n<li>如果 Type(x) 是数字， Type(y) 是字符串，则返回 x == ToNumber(y)\n的结果。</li>\n<li>如果 Type(x) 是字符串， Type(y) 是数字，则返回 ToNumber(x) == y\n的结果。</li>\n</ol>",
    "slug": "js-kuan-song-bi-jiao-gui-fan",
    "sha": "df2e9c8633809f2f352ba06bdcde43a83ec1b3b4"
  },
  "yi-ge-create-react-app-xiang-mu-gou-jian-ti-ji-de-ya-suo": {
    "relatedTags": [
      "react",
      "webpack",
      "github",
      "babel",
      "css"
    ],
    "created_at": "2018-10-14",
    "timeArr": [
      2018,
      9,
      14,
      0,
      0,
      0,
      0
    ],
    "title": "一个create-react-app项目构建体积的压缩",
    "uuid": "f410e8013460016ef21db0425ddcc6ef131809a0",
    "summary": "<p>这是一个个人博客，基于<code>antd</code>搭建，这个项目构建流程如下：</p>\n<ol>\n<li>先启动<code>fetch-blog-serve</code>，这是一个能将你的<code>repertory</code>的blog内容拉去到本地，并且写入<code>xxx.json</code>。</li>\n<li>在写入之前会生成一个列表，包含每一篇blog的标题、日期、标签、摘要、sha值(唯一性判断)。</li>\n<li>前...</li>\n</ol>",
    "slug": "yi-ge-create-react-app-xiang-mu-gou-jian-ti-ji-de-ya-suo",
    "sha": "e0bc2c78310a534ecec19f96adac09f5c5cb835a"
  },
  "cong-ling-kai-shi-gou-jian-babel-cha-jian": {
    "relatedTags": [
      "babel",
      "ast",
      "es6"
    ],
    "created_at": "2018-09-20",
    "timeArr": [
      2018,
      8,
      20,
      0,
      0,
      0,
      0
    ],
    "title": "从零开始构建babel插件",
    "uuid": "1fe9476aee8ec9e615a5ea77d64b322605aa28f8",
    "summary": "<h4>回顾</h4>\n<p>在这一片文章中，我构建一个获取函数参数名的工具，是通过<code>esprima</code>去解析<code>AST</code>并对其进行分析判断。</p>\n<p>通过对<code>AST</code>的分析，几乎能兼容所有函数和参数的写法，这是因为它是从语义上分析代码。</p>\n<h4>问题</h4>\n<p>但使用的同时，也发现了3个问题，<strong>第1个是致命的</strong>。</p>\n<ol>\n<li>babel编译。</li>\n</ol>\n<p>...</p>",
    "slug": "cong-ling-kai-shi-gou-jian-babel-cha-jian",
    "sha": "c6aabf028612373f374ca39935fa4a385595f224"
  },
  "yuan-ma-yue-du-react-infinite-scroller-bi-ji": {
    "relatedTags": [
      "源码",
      "react",
      "笔记"
    ],
    "created_at": "2018-11-25",
    "timeArr": [
      2018,
      10,
      25,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-react-infinite-scroller-笔记",
    "uuid": "e4ce5c4bef01302a0d060390b3bb12ae149f583f",
    "summary": "<ol>\n<li>\n<p><code>offsetParent</code></p>\n<p><code>offsetParent</code>返回一个指向最近的包含该元素的定位元素.</p>\n<p><code>offsetParent</code>很有用，因为计算<code>offsetTop</code>和<code>offsetLeft</code>都是相对于<code>offsetParent</code>边界的。</p>\n<p><code>offsetParent</code>...</p>\n</li>\n</ol>",
    "slug": "yuan-ma-yue-du-react-infinite-scroller-bi-ji",
    "sha": "ca1df5a51761dd3bb612a4ab486576a8102d2d1b"
  },
  "ES6-de-Generators-han-shu-shuang-xiang-chuan-zhi": {
    "relatedTags": [
      "es6"
    ],
    "created_at": "2018-09-14",
    "timeArr": [
      2018,
      8,
      14,
      0,
      0,
      0,
      0
    ],
    "title": "ES6的Generators函数双向传值",
    "uuid": "a20bb2e8ea076042017b4a5a990e2aac82af6a1b",
    "summary": "<p>Generators函数的双向传递</p>\n<p>每次调用<code>answer()</code>，相当于在<code>generators</code>函数的next方法加入参数，这个参数会返回给<code>yield</code>的返回值</p>\n<p>在函数内部可以判断这个返回值，实现双向传递</p>\n<pre class=\"hljs\"><code>  <span class=\"hljs-keyword\">let</span> stepCount=<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">let</span> currentPoint=<span class=\"hljs-number\">1</span>\n  functi...</code></pre>",
    "slug": "ES6-de-Generators-han-shu-shuang-xiang-chuan-zhi",
    "sha": "cacba9466975c15e93a9cba0db310bf12752a2c2"
  },
  "huo-qu-shu-zu-zhong-he-wei-mou-ge-zhi-de-zu-he-shu-liang-de-suan-fa": {
    "relatedTags": [
      "算法"
    ],
    "created_at": "2018-10-02",
    "timeArr": [
      2018,
      9,
      2,
      0,
      0,
      0,
      0
    ],
    "title": "获取数组中和为某个值的组合数量的算法",
    "uuid": "d8cf763cd33c2883caf30f5d6f247da84af3cf8f",
    "summary": "<p>记录一个算法，要求获取数组中的和为<code>sum</code>的组合的数量</p>\n<ul>\n<li>不要求连续，不要求重复</li>\n</ul>\n<p>例如<code>arr=[1,2,3,4,5]</code>，那么和为5的组合数量为3，分别是<code>2,3</code>、<code>1,4</code>、<code>5</code></p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">computeSubset</span>(<span class=\"hljs-params\">arr,sum</span>)</span>{\n  <span class=\"hljs-comment\">// 创建数组，用于记录从1到sum每一个...</span></code></pre>",
    "slug": "huo-qu-shu-zu-zhong-he-wei-mou-ge-zhi-de-zu-he-shu-liang-de-suan-fa",
    "sha": "ccf5cf75d3f663c8c143ed75e3d46b5a2f8aa576"
  },
  "jian-kong-wang-ye-zhuang-tai-de-Page-Lifecycle": {
    "relatedTags": [
      "缓存",
      "github"
    ],
    "created_at": "2018-11-07",
    "timeArr": [
      2018,
      10,
      7,
      0,
      0,
      0,
      0
    ],
    "title": "监控网页状态的-Page Lifecycle",
    "uuid": "dc88a14e3350748449cfa7bae96179c2301f3548",
    "summary": "<h4>监听网页读取状况使用</h4>\n<p><code>DOMContentLoaded</code>和<code>window.onload</code></p>\n<p>监听网页展示状况，可以调用一系列<code>Page LIfecycle</code>API</p>\n<h4>生命周期：</h4>\n<p>![](https://raw.githubusercontent.com/WICG/page-lifecycle/m...</p>",
    "slug": "jian-kong-wang-ye-zhuang-tai-de-Page-Lifecycle",
    "sha": "ce6d06466d2502c0c7cc081e44839f05bad8e8b0"
  },
  "dui-bi-map-{}-[]-de-cun-qu-xiao-lv": {
    "relatedTags": [
      "性能"
    ],
    "created_at": "2018-08-21",
    "timeArr": [
      2018,
      7,
      21,
      0,
      0,
      0,
      0
    ],
    "title": "对比map,{},[]的存取效率",
    "uuid": "80cda11f9e18b118723c11b54a629d2ce4a71c79",
    "summary": "<p>对比了map和hashTable对数据存取的性能，key类型为string</p>\n<p>测试方法：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// CODES是字符串组成的数组</span>\n\n<span class=\"hljs-comment\">// map</span>\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> x=<span class=\"hljs-number\">0</span>;x&lt;<span class=\"hljs-number\">2</span>;x++){\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> k=<span class=\"hljs-number\">0</span>;k&lt;CODES.length;k++){\n      <span class=\"hljs-keyword\">let</span> i=CODES[k]\n   ...</code></pre>",
    "slug": "dui-bi-map-{}-[]-de-cun-qu-xiao-lv",
    "sha": "d2b8968488e3098bc8d6a318374cc0b57ab9511d"
  },
  "ji-yi-dao-er-fen-cha-zhao-suan-fa-ti": {
    "relatedTags": [
      "算法",
      "leetcode"
    ],
    "created_at": "2018-07-29",
    "timeArr": [
      2018,
      6,
      29,
      0,
      0,
      0,
      0
    ],
    "title": "记一道二分查找算法题",
    "uuid": "00c5d9ed2847e38150e59f8030c9eff752b313f7",
    "summary": "<p>题目位置：https://leetcode.com/problems/nth-magical-number/description/</p>\n<p>题目：</p>\n<p>如果正整数 可被A  或B整除，则它是神奇的。</p>\n<p>返回第N个魔法数字。由于答案可能非常大，因此返回值需要模(%)10^9 + 7。</p>\n<p>例1：</p>\n<pre class=\"hljs\"><code>输入： N = 1，A ...</code></pre>",
    "slug": "ji-yi-dao-er-fen-cha-zhao-suan-fa-ti",
    "sha": "d3c6d7ae8150d554512c3b20c6ccc2cd575468c5"
  },
  "yi-duan-mo-ni-wei-diao-yong-de-dai-ma": {
    "relatedTags": null,
    "created_at": "2018-09-17",
    "timeArr": [
      2018,
      8,
      17,
      0,
      0,
      0,
      0
    ],
    "title": "一段模拟尾调用的代码",
    "uuid": "486e17cd17cf6034e71874e022bd9b11474cb15f",
    "summary": "<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">tco</span>(<span class=\"hljs-params\">f</span>) </span>{\n            <span class=\"hljs-keyword\">var</span> value;\n            <span class=\"hljs-keyword\">var</span> active = <span class=\"hljs-literal\">false</span>;\n            <span class=\"hljs-keyword\">var</span> accumulated = [];\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">accumulator</span>(<span class=\"hljs-params\"></span>) </span>{\n   ...</code></pre>",
    "slug": "yi-duan-mo-ni-wei-diao-yong-de-dai-ma",
    "sha": "d4ccfc9c818cb82435d9ad49679ef1c39a597b27"
  },
  "ji-lu-yi-ci-xhr.upload.onprogress-tian-keng": {
    "relatedTags": [
      "github"
    ],
    "created_at": "2018-08-18",
    "timeArr": [
      2018,
      7,
      18,
      0,
      0,
      0,
      0
    ],
    "title": "记录一次xhr.upload.onprogress填坑",
    "uuid": "f72ad63b02516bf71d570ecbf6c39488e64deb8e",
    "summary": "<h4>一次xhr.upload.onprogress与multiparty搭配的踩坑记录</h4>\n<p>有一个[分段上传的demo](https://github.com/stonehank/blogs/blob/master/07-26-%E9%80%9A%E8%BF%87blob%E5%AE%9E%E7%8E%B0%E6%96...</p>",
    "slug": "ji-lu-yi-ci-xhr.upload.onprogress-tian-keng",
    "sha": "bc7ed8c6eae00e50c69810221c75724e5987c3ef"
  },
  "CORS-tong-xin": {
    "relatedTags": [
      "cors",
      "表单"
    ],
    "created_at": "2018-08-14",
    "timeArr": [
      2018,
      7,
      14,
      0,
      0,
      0,
      0
    ],
    "title": "CORS通信",
    "uuid": "4aa3042e4e1e6dbca1c52b5895fc12ef898bb9a1",
    "summary": "<p>CORS通信就是服务端设置<code>Access-Control-Allow-Origin</code>等配置</p>\n<p>分为2类请求，简单请求和非简单请求</p>\n<ul>\n<li>\n<p>简单请求：</p>\n<p>无预检，直接传递数据的时候检查是否同源</p>\n<p>Content-Type类型：</p>\n<p>`application/x-www-form-urlenco...</p>\n</li>\n</ul>",
    "slug": "CORS-tong-xin",
    "sha": "bc9cd7d945070b9e0abe4cde44baf13cf7044425"
  },
  "yuan-ma-yue-du-react-redux-can-shu-wei-obj-de-mo-ren-can-shu-xie-fa": {
    "relatedTags": [
      "源码",
      "react",
      "redux"
    ],
    "created_at": "2018-11-18",
    "timeArr": [
      2018,
      10,
      18,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-react-redux-参数为obj的默认参数写法",
    "uuid": "42b4b2b7669e8fdbc1cd63d0eb42e60b98c48f8e",
    "summary": "<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myFunc</span>(<span class=\"hljs-params\">{x=<span class=\"hljs-number\">1</span>,y=<span class=\"hljs-number\">2</span>}</span>)</span>{\n  <span class=\"hljs-built_in\">console</span>.log(x,y)  \n  <span class=\"hljs-comment\">// ...</span>\n}\nmyFunc({})      <span class=\"hljs-comment\">// x:1,y:2</span>\nmyFunc()        <span class=\"hljs-comment\">// 报错</span>\nmyFunc(<span class=\"hljs-literal\">null</span>)    <span class=\"hljs-comment\">// 报错</span>\n</code></pre>\n<p>不传参数，则从<code>undefined</code>里...</p>",
    "slug": "yuan-ma-yue-du-react-redux-can-shu-wei-obj-de-mo-ren-can-shu-xie-fa",
    "sha": "bca6508299954ec1022678e1f36b060954a8e990"
  },
  "er-fen-cha-zhao-de-range-fang-fa": {
    "relatedTags": [
      "算法"
    ],
    "created_at": "2018-09-11",
    "timeArr": [
      2018,
      8,
      11,
      0,
      0,
      0,
      0
    ],
    "title": "二分查找的range方法",
    "uuid": "5ba1422eb5748f36ae6b36980b06e537d336b746",
    "summary": "<p>通常二分查找算法是根据index进行查找，并且要求数据结构是已排序的。</p>\n<p>这里记录一个未排序的二分查找</p>\n<p>题目：在一个数组arr中，找出从小到大第n个的数字</p>\n<p>例如：<code>[6,3,8,1,4,7]</code>，找出第3位，结果是4</p>\n<p>使用排序也可以解决，当空间有限制时，时间复杂度是<code>O(N*lgN)</code>，~~但二分查找的范围法可以控...</p>",
    "slug": "er-fen-cha-zhao-de-range-fang-fa",
    "sha": "bcaa51d3db66e9c67d11b14a85afe0fed30faf07"
  },
  "liang-ge-zi-fu-chuan-zui-xiao-bian-ji-ju-li-suan-fa": {
    "relatedTags": [
      "算法"
    ],
    "created_at": "2018-06-18",
    "timeArr": [
      2018,
      5,
      18,
      0,
      0,
      0,
      0
    ],
    "title": "两个字符串最小编辑距离算法",
    "uuid": "77f0065531e454cbcc9fad960f3cdbe37d6e2d25",
    "summary": "<h4>学习Levenshtein Distance算法</h4>\n<p>任意单个字符变动有3种情况，替换，增加和删除：</p>\n<p><strong>1. 如果对应的字符相同，则从它的左，斜或者上方选取最小值，直接填写</strong>\n<strong>2. 如果对应的字符不相同，则从它的左，斜或者上方选取最小值，+1后填写</strong></p>\n<p>括号内部表示需要进行移动的步数</p>\n<ul>\n<li>...</li>\n</ul>",
    "slug": "liang-ge-zi-fu-chuan-zui-xiao-bian-ji-ju-li-suan-fa",
    "sha": "be3a5d23fd6575a2a323c8daa62b9432f71776ec"
  },
  "tong-guo-jie-xi-blob-shi-xian-tu-pian-yu-lan": {
    "relatedTags": [
      "github"
    ],
    "created_at": "2018-07-25",
    "timeArr": [
      2018,
      6,
      25,
      0,
      0,
      0,
      0
    ],
    "title": "通过解析blob实现图片预览",
    "uuid": "c210dfbee9273c04ed715f0cf70a75b648672b17",
    "summary": "<h4>解析blob实现图片预览</h4>\n<p>原理很简单，<code>blob</code>是一个储存了二进制的大对象，而<code>createObjectURL</code>可以解析blob成为一个url格式，\n再用<code>img</code>标签渲染即可。</p>\n<pre class=\"hljs\"><code>  <span class=\"hljs-keyword\">if</span>(blob.type.indexOf(<span class=\"hljs-string\">'image'</span>)!==<span class=\"hljs-number\">-1</span>){\n    newURL=<span class=\"hljs-built_in\">window</span>.U...</code></pre>",
    "slug": "tong-guo-jie-xi-blob-shi-xian-tu-pian-yu-lan",
    "sha": "bf946078e90730d7d626fe3573c4adad5f9cd0e2"
  },
  "kang-tuo-zhan-kai-suan-fa": {
    "relatedTags": [
      "算法"
    ],
    "created_at": "2019-03-29",
    "timeArr": [
      2019,
      2,
      29,
      0,
      0,
      0,
      0
    ],
    "title": "康拓展开算法",
    "uuid": "25190dd0cd5c8e0af3419567a8b6216802ec408e",
    "summary": "<ul>\n<li>\n<p>康拓展开</p>\n<p>例如，<code>2431</code>有多少种排列方式会比它小的，那么我们的计算方式是：</p>\n<p><code>1 * 3! + 2 * 2! + 1 * 1! + 0 * 0! = 11</code></p>\n<p>解释：</p>\n<p>第一个数<code>2</code>，比它小的有1个，后续能排列数量有<code>3!</code></p>\n<p>第二个...</p>\n</li>\n</ul>",
    "slug": "kang-tuo-zhan-kai-suan-fa",
    "sha": "c0a7f96accec11aab2162dfcb3787daff1b25439"
  },
  "ji-lu-CRA-de-webpack-pei-zhi-ceng-jing-de-issue-4": {
    "relatedTags": [
      "webpack",
      "github",
      "react",
      "css"
    ],
    "created_at": "2018-10-25",
    "timeArr": [
      2018,
      9,
      25,
      0,
      0,
      0,
      0
    ],
    "title": "记录CRA的webpack配置曾经的issue-4",
    "uuid": "26521baed3a1e852019bad397f751e106be8b610",
    "summary": "<ul>\n<li>webpack的<code>sideEffect</code></li>\n</ul>\n<p>在配置css-loader的内部</p>\n<pre class=\"hljs\"><code>{\n  test: sassRegex,\n  ...\n  // Don't consider CSS imports dead code even if the\n  // containing package claims to...</code></pre>",
    "slug": "ji-lu-CRA-de-webpack-pei-zhi-ceng-jing-de-issue-4",
    "sha": "c652978c17e0cd7fcf3dd94e0dab32551f0b884e"
  },
  "tu-jie-Http-da-gang-bi-ji-(2)": {
    "relatedTags": [
      "笔记",
      "表单"
    ],
    "created_at": "2018-11-26",
    "timeArr": [
      2018,
      10,
      26,
      0,
      0,
      0,
      0
    ],
    "title": "图解Http大纲笔记(2)",
    "uuid": "6b947579be3958bc587abb5535d818129ff810da",
    "summary": "<p>实体首部字段</p>\n<ul>\n<li>Content-Encoding：实体编码方式(gzip, compress, deflate, identity)</li>\n<li>Content-Location：报文主体返回资源对应的 URI(不一定是请求URI)。</li>\n<li>Content-Range：匹配部分。</li>\n<li>Content-Type：实体内对象的媒...</li>\n</ul>",
    "slug": "tu-jie-Http-da-gang-bi-ji-(2)",
    "sha": "ad5b165bf43fc96f65189cf43aad4253aafc6b16"
  },
  "yi-ci-webpack-da-jian-yu-dao-de-keng": {
    "relatedTags": [
      "webpack",
      "css"
    ],
    "created_at": "2019-08-03",
    "timeArr": [
      2019,
      7,
      3,
      0,
      0,
      0,
      0
    ],
    "title": "一次webpack搭建遇到的坑",
    "uuid": "f7dd6e266b1a5e851a141bd30cacb677f6cb8562",
    "summary": "<h4>路径坑：</h4>\n<ul>\n<li>html图片路径：</li>\n</ul>\n<p>要利用<code>html-loader</code>的 <code>attr</code> 处理，只有<code>attr</code>覆盖到了，才会打包它。</p>\n<p>例如<code>img</code>的<code>src</code>(img:src) 和<code>link</code>的<code>ref</code>(link:ref)，例如<code>favicon</code>，和一些用了<code>data-src</code>的，例如`lazylo...</p>",
    "slug": "yi-ci-webpack-da-jian-yu-dao-de-keng",
    "sha": "af5982279e618f8e78c8acbd9a329c7a3d2f6087"
  },
  "Http-quan-wei-zhi-nan-http-xing-neng": {
    "relatedTags": [
      "性能",
      "算法",
      "缓存"
    ],
    "created_at": "2019-04-11",
    "timeArr": [
      2019,
      3,
      11,
      0,
      0,
      0,
      0
    ],
    "title": "《Http权威指南》http性能",
    "uuid": "2d6cd16c42d4c8dc0c9ccfed027881544a800d15",
    "summary": "<p>影响<code>Http</code>性能的几点：</p>\n<ol>\n<li>\n<p>TCP 慢启动</p>\n<p>指的是TCP连接最初会被限制连接最大速度，只有当数据传送成功，才会逐步提高传输速度，这是为了防止因特网突然过载和拥塞。</p>\n</li>\n<li>\n<p><code>Nagle</code>算法</p>\n<p>将大量TCP数据绑定在一起，避免大量的小数据的分组。但问题是，可能因为等待其他TCP数据产...</p>\n</li>\n</ol>",
    "slug": "Http-quan-wei-zhi-nan-http-xing-neng",
    "sha": "b037d4e8d3b90a0aa21d65b03af8e28caf013de4"
  },
  "getDerivedStateFromProps": {
    "relatedTags": [
      "react"
    ],
    "created_at": "2018-06-07",
    "timeArr": [
      2018,
      5,
      7,
      0,
      0,
      0,
      0
    ],
    "title": "getDerivedStateFromProps",
    "uuid": "5a309baed59601de7885e379ac2562b045fb413d",
    "summary": "<p>react的<code>getDerivedStateFromProps</code>内部不可以有副作用，因为现在是无论是state改变还是props改变，\n都会执行它。</p>\n<p>例如：</p>\n<p>这种写法会导致多次循环渲染直到报错</p>\n<pre class=\"hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(props){\n  ...</code></pre>",
    "slug": "getDerivedStateFromProps",
    "sha": "b0683499799fb64f81d0d942134c7304c29cc5f0"
  },
  "suan-fa-ji-lu-zui-chang-hui-wen-zi-zi-fu-chuan": {
    "relatedTags": [
      "算法"
    ],
    "created_at": "2018-08-27",
    "timeArr": [
      2018,
      7,
      27,
      0,
      0,
      0,
      0
    ],
    "title": "算法记录-最长回文子字符串",
    "uuid": "af105b2df12bc15528a731d149193b4aa9927533",
    "summary": "<p>思路：利用对称思想</p>\n<ol>\n<li>先将原字符串转换成转换成 <code>#x$x$x$</code> 的形式(一定是奇数)</li>\n<li>p为一个数组，储存每一个值的最大回文数量的一半+1，例如：'ababa' 对应的p 就是<code>[1,2,3,2,1]</code></li>\n<li><code>max</code>为当前已经计算过得最大回文量<code>p[id]</code>+对应的位置<code>id</code>，默认为0或者-infi...</li>\n</ol>",
    "slug": "suan-fa-ji-lu-zui-chang-hui-wen-zi-zi-fu-chuan",
    "sha": "b43da9771d20a5bb5e735c832af36f85b932df54"
  },
  "setTimeout-Promise-nextTick-setImmediate-bi-jiao": {
    "relatedTags": [
      "promise",
      "github"
    ],
    "created_at": "2018-12-29",
    "timeArr": [
      2018,
      11,
      29,
      0,
      0,
      0,
      0
    ],
    "title": "setTimeout&Promise&nextTick&setImmediate比较",
    "uuid": "32f90eaf4808bb2b560d3a1c843cd785de0f72cc",
    "summary": "<h4>触发速度排序</h4>\n<p><code>nextTick</code> → <code>Promise</code> → <code>setTimeout</code> → <code>setImmediate</code></p>\n<h4>关于<code>微任务队列</code></h4>\n<p>每当JS执行栈为空，会立刻检查<code>微任务队列</code>，当发现队列存在任务，立即执行，执行完毕，栈为空，继续检测...</p>\n<h4>关于<code>nextTick队列</code></h4>\n<p>在...</p>",
    "slug": "setTimeout-Promise-nextTick-setImmediate-bi-jiao",
    "sha": "b589bdc846b64d945f730a0f8dd8320bf5473996"
  },
  "indexedDB-jian-yao-zeng-shan-cha": {
    "relatedTags": [
      "indexeddb"
    ],
    "created_at": "2018-08-15",
    "timeArr": [
      2018,
      7,
      15,
      0,
      0,
      0,
      0
    ],
    "title": "indexedDB简要增删查",
    "uuid": "b8d2829958b70c73fa0733e45fe779eff931cbc5",
    "summary": "<p>indexedDB\n在客户端进行保存保存：</p>\n<pre class=\"hljs\"><code>{id: 1, name: &quot;张三&quot;, age: 24, email: &quot;zhangsan@example.com&quot;}\n{id: 2, name: &quot;李四&quot;, age: 54, email: &quot;lisi@example.com&quot;}\n{id: 3, name: &quot;王五...</code></pre>",
    "slug": "indexedDB-jian-yao-zeng-shan-cha",
    "sha": "b9c382c33ecfc711c7de0a929d346090b6c78122"
  },
  "yuan-ma-yue-du-jie-xi-anime-he-xin-(2)": {
    "relatedTags": [
      "源码",
      "算法",
      "github",
      "css"
    ],
    "created_at": "2018-07-22",
    "timeArr": [
      2018,
      6,
      22,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-解析anime核心(2)",
    "uuid": "2a9c7da01d48a31e62efc8c651405161597524f1",
    "summary": "<p>本次解析将分为2篇文章，当前是第二篇，第一篇在<a href=\"./07-20-%E8%A7%A3%E6%9E%90anime%E6%A0%B8%E5%BF%83(1).md\">这里</a></p>\n<p>另外，为了能更好的理解这个库，个人写了一个此库的压缩版，实现了核心的功能(主要也是为了更好理解核心功能)，内容更少方便阅读，\n地址在[这里](https://github.com/stonehank/simpli...</p>",
    "slug": "yuan-ma-yue-du-jie-xi-anime-he-xin-(2)",
    "sha": "a9f78f786c764a619cefc5156e3120771d547641"
  },
  "guan-yu-duo-ye-mian-jia-gou-de-yi-xie-gai-jin-ji-lu": {
    "relatedTags": [
      "react",
      "vue"
    ],
    "created_at": "2021-06-06",
    "timeArr": [
      2021,
      5,
      6,
      0,
      0,
      0,
      0
    ],
    "title": "关于多页面架构的一些改进记录",
    "uuid": "eb0d4100c186d638be56c73f46e9a3c7b79ef557",
    "summary": "<p>最近在合并一些项目，有些用<code>Vue</code>，有的用<code>React</code>，需要将它们整合成一个项目，就用了自己的多页面项目框架，几点感受和需要改进的想法记录下。</p>\n<p>一些感受：</p>\n<ul>\n<li>总的来说合并还是比较顺利的，一些依赖组件比较旧，因此另外一些依赖组件必须降级才能兼容使用；</li>\n<li>由于目前不同的框架还是占用不同页面，需要另外一个独立的导...</li>\n</ul>",
    "slug": "guan-yu-duo-ye-mian-jia-gou-de-yi-xie-gai-jin-ji-lu",
    "sha": "ab7b2795a1c62781543e7cd495aa91abce71e480"
  },
  "LeetCode-zui-da-3-ge-bu-chong-die-zi-shu-zu-zhi-he": {
    "relatedTags": [
      "leetcode"
    ],
    "created_at": "2018-10-26",
    "timeArr": [
      2018,
      9,
      26,
      0,
      0,
      0,
      0
    ],
    "title": "LeetCode最大3个不重叠子数组之和",
    "uuid": "761230c6c621098f0a8a2e62ab620dffa59a3460",
    "summary": "<p>一个只包含正数的数组，找三个长度为k的不重叠的子数组，使得所有子数组的数字之和最大。</p>\n<p>例如：</p>\n<pre class=\"hljs\"><code>Input: [1,2,1,2,6,7,5,1], 2\nOutput: [0, 3, 5]\nExplanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to th...</code></pre>",
    "slug": "LeetCode-zui-da-3-ge-bu-chong-die-zi-shu-zu-zhi-he",
    "sha": "abbf38ac11dcc38431445248ada55b000c3406ec"
  },
  "react-de-bian-xie-mo-shi": {
    "relatedTags": [
      "react"
    ],
    "created_at": "2018-08-04",
    "timeArr": [
      2018,
      7,
      4,
      0,
      0,
      0,
      0
    ],
    "title": "react的编写模式",
    "uuid": "6fd675137d4fc7c9017a5d49e6617b15a17ace30",
    "summary": "<p>使用4种方式：props传递，父组件公用，hoc，render-prop</p>\n<p>定义需求，cur符合auth才能查看组件内容，否则进入NotAccess</p>\n<pre class=\"hljs\"><code>const cur = &quot;a&quot;;\nconst auth = {\n  com1: [&quot;a&quot;, &quot;b&quot;],\n  com2: [&quot;b&quot;, &quot;c&quot;],\n  com3: [...</code></pre>",
    "slug": "react-de-bian-xie-mo-shi",
    "sha": "ac63fa5d204d619196b3d6c6134d623fb670d2f1"
  },
  "reach-router": {
    "relatedTags": [
      "router",
      "源码",
      "react",
      "github"
    ],
    "created_at": "2018-07-08",
    "timeArr": [
      2018,
      6,
      8,
      0,
      0,
      0,
      0
    ],
    "title": "reach-router",
    "uuid": "1478ca77fae5cf65527c2cf310fae0e530ea7496",
    "summary": "<h4>reach/router</h4>\n<p><a href=\"https://github.com/stonehank/sourcecode-analysis/blob/master/source-code.reach-router/README.md\">完整源码说明注释</a></p>\n<p>一张导图：</p>\n<p>![](https://stonehank.githu...</p>",
    "slug": "reach-router",
    "sha": "a479afc7ac0daaf4863905d74229db3658f16354"
  },
  "qian-duan-ri-chang-bi-ji": {
    "relatedTags": [
      "笔记",
      "react"
    ],
    "created_at": "2018-12-08",
    "timeArr": [
      2018,
      11,
      8,
      0,
      0,
      0,
      0
    ],
    "title": "前端日常笔记",
    "uuid": "34441675832af7bfe9b306f5bd75927d10cb58a0",
    "summary": "<p>内容包括：<code>tag 模板字符串</code>，<code>Labelled statements</code>，<code>React服务端渲染使用stream</code>，<code>jest.fn</code>，<code>jest.mock</code></p>\n<h4>tag 模板字符串</h4>\n<p>以<code>${xx}</code>分割字符串，分别传入2个数组，第一个是<code>分割后的结果</code>，第二个是<code>分割的变量</code></p>\n<p>例如：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// ...</span></code></pre>",
    "slug": "qian-duan-ri-chang-bi-ji",
    "sha": "a599fef4a57cb1e1e640bb153fdedda0e6ad5339"
  },
  "tu-jie-Http-da-gang-bi-ji-(1)": {
    "relatedTags": [
      "缓存",
      "笔记"
    ],
    "created_at": "2018-11-14",
    "timeArr": [
      2018,
      10,
      14,
      0,
      0,
      0,
      0
    ],
    "title": "图解Http大纲笔记(1)",
    "uuid": "cd67e255a685952b6e3ba3efb90befd0197d1fe4",
    "summary": "<ul>\n<li>TCP/IP分为4个层</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\">代表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">应用层</td>\n<td style=\"text-align:center\">HTTP</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">传输层</td>\n<td style=\"text-align:center\">TCP</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">网络层</td>\n<td style=\"text-align:center\">IP</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">链路层</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>HTTP协议</p>\n<ul>\n<li>生成请求提交(客户端)</li>\n<li>处理请求(服务端)</li>\n</ul>\n</li>\n<li>\n<p>DNS协议</p>\n<ul>\n<li>根据域名查找IP</li>\n</ul>\n</li>\n<li>\n<p>TCP...</p>\n</li>\n</ul>",
    "slug": "tu-jie-Http-da-gang-bi-ji-(1)",
    "sha": "a606cff58ed32d4564139956743675e9c438e11a"
  },
  "ru-he-tong-guo-AST-shu-qu-huo-qu-han-shu-can-shu-ming": {
    "relatedTags": [
      "ast",
      "正则",
      "github",
      "npm",
      "es6"
    ],
    "created_at": "2018-09-18",
    "timeArr": [
      2018,
      8,
      18,
      0,
      0,
      0,
      0
    ],
    "title": "如何通过AST树去获取函数参数名",
    "uuid": "ddc3d1d8d6334cc464eb634a0d813d48c0d48776",
    "summary": "<h4>写在最前</h4>\n<p>最近项目有个需求，获取函数参数名，听起来很简单，但有了ES6，参数和函数写法千奇百怪，在github上大概看了几个库，基本上都是正则，\n对通用的写法能够覆盖，稍微越过边界，往往无法正确匹配。</p>\n<p>于是就有了使用<code>AST</code>去进行覆盖查找的想法。</p>\n<h4>概念</h4>\n<p>抽象语法树（abstract synta...</p>",
    "slug": "ru-he-tong-guo-AST-shu-qu-huo-qu-han-shu-can-shu-ming",
    "sha": "a7854a9c9c9dd7722bb525311af632ee5752fe47"
  },
  "MYSQL-chang-yong-ming-ling-ji-lu": {
    "relatedTags": [
      "mysql"
    ],
    "created_at": "2018-09-04",
    "timeArr": [
      2018,
      8,
      4,
      0,
      0,
      0,
      0
    ],
    "title": "MYSQL常用命令记录",
    "uuid": "b3f75a48780077e930c5409efefb6e27050a2057",
    "summary": "<ul>\n<li>给表添加别名(M是movies的别名,T是title的输出名)</li>\n</ul>\n<p><code>SELECT title as T  FROM movies M;</code></p>\n<ul>\n<li>添加row</li>\n</ul>\n<p><code>INSERT  INTO library VALUES (1,'javascript',8);</code></p>\n<ul>\n<li>条件排序order by</li>\n</ul>\n<p>`SELECT *  F...</p>",
    "slug": "MYSQL-chang-yong-ming-ling-ji-lu",
    "sha": "876bcd03410d0865b98212677e8ea1297deefb8a"
  },
  "qiu-bu-chong-die-jian-ge-de-suan-fa": {
    "relatedTags": [
      "算法"
    ],
    "created_at": "2018-11-08",
    "timeArr": [
      2018,
      10,
      8,
      0,
      0,
      0,
      0
    ],
    "title": "求不重叠间隔的算法",
    "uuid": "bebc0fc1532d19e9cec7bedd22a5141f7927276c",
    "summary": "<p>给出一系列间隔，例如<code>[[1,2],[3,5],[1,3],[2,3],[2,4]]</code></p>\n<p>求出最大的不重复间隔数量。</p>\n<p>例1:</p>\n<p>input : <code>[[1,2],[3,5],[1,3],[2,3],[2,4]]</code></p>\n<p>output : 3</p>\n<p>这种题思路是按间隔的<code>尾部排序</code>。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/**\n * Definiti...</span></code></pre>",
    "slug": "qiu-bu-chong-die-jian-ge-de-suan-fa",
    "sha": "88bd0b8b65d66224f77f7c40a5034f06a5ca729a"
  },
  "ji-lu-CRA-de-webpack-pei-zhi-ceng-jing-de-issue-5": {
    "relatedTags": [
      "webpack",
      "react",
      "github",
      "es6"
    ],
    "created_at": "2019-05-16",
    "timeArr": [
      2019,
      4,
      16,
      0,
      0,
      0,
      0
    ],
    "title": "记录CRA的webpack配置曾经的issue-5",
    "uuid": "61201b4391ad7bf76e96a9ebee00ef017060bc32",
    "summary": "<p>问题地址：<a href=\"https://github.com/facebook/create-react-app/issues/240\">https://github.com/facebook/create-react-app/issues/240</a></p>\n<p>触发原因：</p>\n<p>在一次处理组件的分割子组件和引用时，由于大小写的失误，导致热更...</p>",
    "slug": "ji-lu-CRA-de-webpack-pei-zhi-ceng-jing-de-issue-5",
    "sha": "8d6fcb285907c764f600268a93546755ad3d3afa"
  },
  "css3-zhong-fu-zhi-dong-tai-bang-ding-shi-jian": {
    "relatedTags": [
      "性能"
    ],
    "created_at": "2018-06-30",
    "timeArr": [
      2018,
      5,
      30,
      0,
      0,
      0,
      0
    ],
    "title": "css3种赋值-动态绑定事件",
    "uuid": "4f4c6e28771908a591c243c12f68d65599bc6d0e",
    "summary": "<h4>css3种赋值方式</h4>\n<ol>\n<li><code>element.style.name=value</code></li>\n<li><code>element.style.setProperty('name','value')</code></li>\n<li><code>element.style.cssText=&quot;name:value&quot;</code></li>\n</ol>\n<p>1和2一次都只能对单个属性赋值，只对name属性赋值，2...</p>",
    "slug": "css3-zhong-fu-zhi-dong-tai-bang-ding-shi-jian",
    "sha": "8e96930475cb06f0123593475430fadf9ed6eec0"
  },
  "svg-xuan-ran-dom，canvas-huo-qu-xiang-su": {
    "relatedTags": [
      "canvas"
    ],
    "created_at": "2018-08-13",
    "timeArr": [
      2018,
      7,
      13,
      0,
      0,
      0,
      0
    ],
    "title": "svg渲染dom，canvas获取像素",
    "uuid": "2d2fe99476f8b0fcf2a0f7ff6061756eff4803e5",
    "summary": "<h4>foreignObject</h4>\n<p>svg内部标签<code>&lt;foreignObject&gt;</code>，可以直接在svg内部插入<code>xhtml</code>元素，再通过<code>blob</code>和<code>FileReader</code>可\n将内部<code>xhtml</code>内容转换成<em>同源</em>url，再通过<code>img.src=url</code>将svg内部的dom元素转化为图片。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">let</span>  d...</code></pre>",
    "slug": "svg-xuan-ran-dom，canvas-huo-qu-xiang-su",
    "sha": "8f6c34d738ca1b40e7dbc5fd7c069695a2fb4443"
  },
  "jie-jue-disqus-wu-fa-zheng-que-xian-shi-mei-yi-ge-comment-count": {
    "relatedTags": [
      "disqus"
    ],
    "created_at": "2018-10-27",
    "timeArr": [
      2018,
      9,
      27,
      0,
      0,
      0,
      0
    ],
    "title": "解决disqus无法正确显示每一个comment count",
    "uuid": "7a618f35d69b48cbdbef3e7285fffc03098e720a",
    "summary": "<p>博客添加了<code>disqus</code>，并且在文章列表处每一篇标题边上添加一个评论计数器。</p>\n<p>它通过<code>identifier</code>去获取，<code>identifier</code>在文章详情页面提供配置。</p>\n<p>问题是：<strong>这个计数器并不是每一篇文章都能正确显示</strong>，有的列表能显示2个，有的列表一个都不显示，</p>\n<p>![](https://stonehank.g...</p>",
    "slug": "jie-jue-disqus-wu-fa-zheng-que-xian-shi-mei-yi-ge-comment-count",
    "sha": "901e43a8e9f1c5cf70956f7fb9139ccb541370fd"
  },
  "drawImage-de-9-ge-can-shu": {
    "relatedTags": [
      "canvas"
    ],
    "created_at": "2018-09-03",
    "timeArr": [
      2018,
      8,
      3,
      0,
      0,
      0,
      0
    ],
    "title": "drawImage的9个参数",
    "uuid": "0dd0d60aa80404051e5b01683717fd83676f1c68",
    "summary": "<p>canvas的drawImage方法组多可以有9个参数，如下：</p>\n<pre class=\"hljs\"><code>void ctx.drawImage(image, dx, dy);\nvoid ctx.drawImage(image, dx, dy, dWidth, dHeight);\nvoid ctx.drawImage(image, sx, sy, sWi...</code></pre>",
    "slug": "drawImage-de-9-ge-can-shu",
    "sha": "9037842d9026af5c37a1ba0eca58e9071b5903e3"
  },
  "yuan-ma-yue-du-react-redux-shi-yong-Hooks-ti-huan-yi-chu-luo-ji": {
    "relatedTags": [
      "源码",
      "react",
      "redux"
    ],
    "created_at": "2018-11-18",
    "timeArr": [
      2018,
      10,
      18,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-react-redux-使用Hooks替换一处逻辑",
    "uuid": "75b7a94b953a19ffc6d8a4b8352441ee521ee46e",
    "summary": "<p>Provider组件中有2个生命周期函数：</p>\n<pre class=\"hljs\"><code>componentWillUnmount() {\n  if (this.unsubscribe) this.unsubscribe()\n  this._isMounted = false\n}\n\ncomponentDidUpdate(prevProps) {\n  //...</code></pre>",
    "slug": "yuan-ma-yue-du-react-redux-shi-yong-Hooks-ti-huan-yi-chu-luo-ji",
    "sha": "914eddfc21a7198b0e39080e62fc5cf7ec280993"
  },
  "Blob-dui-xiang-he-createObjectURL": {
    "relatedTags": [
      "worker"
    ],
    "created_at": "2018-07-24",
    "timeArr": [
      2018,
      6,
      24,
      0,
      0,
      0,
      0
    ],
    "title": "Blob对象和createObjectURL",
    "uuid": "c2c3bf8775d224910f8bdac31eb7e0ff5a28d431",
    "summary": "<h4>Blob与createObjectURL搭配使用</h4>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> blob = <span class=\"hljs-keyword\">new</span> Blob([<span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'#worker'</span>).textContent]);\n<span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-built_in\">window</span>.URL.createObjectURL(blob);\n<span class=\"hljs-keyword\">var</span> worker ...</code></pre>",
    "slug": "Blob-dui-xiang-he-createObjectURL",
    "sha": "92b4e89a32882a49232d054e12b2f724a0e9fa68"
  },
  "chu-shi-hua-shu-zu-de-xing-neng-bi-jiao": {
    "relatedTags": [
      "性能"
    ],
    "created_at": "2018-06-19",
    "timeArr": [
      2018,
      5,
      19,
      0,
      0,
      0,
      0
    ],
    "title": "初始化数组的性能比较",
    "uuid": "1bc31bd290d4582fbd008d35949802c4ed8ba93e",
    "summary": "<h4>一些常用的初始化数组为index的方法的性能比较</h4>\n<p>注释为执行时间，这就是为什么循环推荐使用for循环了</p>\n<p>(整段复制到控制台执行)</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 一、</span>\n<span class=\"hljs-keyword\">var</span> a=performance.now()\n<span class=\"hljs-keyword\">var</span> arr=[];\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10000000</span>;i++){\n    arr[i]=...</code></pre>",
    "slug": "chu-shi-hua-shu-zu-de-xing-neng-bi-jiao",
    "sha": "933a48b25bde1a4296a5e153484a755778fd792c"
  },
  "yuan-sheng-biao-dan-yan-zheng-xiang-guan": {
    "relatedTags": [
      "表单"
    ],
    "created_at": "2018-08-17",
    "timeArr": [
      2018,
      7,
      17,
      0,
      0,
      0,
      0
    ],
    "title": "原生表单验证相关",
    "uuid": "bd9804a5d37884a5eff1d06717429f0517cd2782",
    "summary": "<h4>表单验证原生</h4>\n<ul>\n<li>\n<p>查看是否通过验证：\n<code>ele.checkValidity</code></p>\n</li>\n<li>\n<p>验证不通过的时候的提示（只读）：\n<code>ele.validationMessage</code></p>\n<p>可以通过setCustomValidity修改，设为空字符串表示取消自定义提示，但要设定条件，否则默认不通过</p>\n<p>`ele.set...</p>\n</li>\n</ul>",
    "slug": "yuan-sheng-biao-dan-yan-zheng-xiang-guan",
    "sha": "9d6992f642b20f00a885c2f614ed58f5ff23a0e4"
  },
  "yuan-ma-yue-du-anime-he-react-motion-suan-fa-cha-yi": {
    "relatedTags": [
      "react",
      "算法",
      "源码"
    ],
    "created_at": "2018-08-05",
    "timeArr": [
      2018,
      7,
      5,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-anime和react-motion算法差异",
    "uuid": "3b4d16a57b6ee44ecffdda18a89a5c0f7cf5808c",
    "summary": "<p><code>anime</code>用的是缓动算法</p>\n<p>算法规定了动画形式，需要提供总消耗时间，当前消耗时间，初始位置，目标位置</p>\n<p>特点：动画灵活性更大,可以指定任意的时间而得到对应的位置，可以实现暂停/继续，动画跳转，动画进度条等</p>\n<p><code>react-motion</code>用的是弹性算法</p>\n<p>算法规定了弹性和阻力，只要提供初始位置和目标位置，即可计算出动...</p>",
    "slug": "yuan-ma-yue-du-anime-he-react-motion-suan-fa-cha-yi",
    "sha": "9f1747ec27f36e527867dcc4368704ce642ca78d"
  },
  "customElements-jian-shu-bi-ji": {
    "relatedTags": [
      "笔记",
      "promise"
    ],
    "created_at": "2018-12-06",
    "timeArr": [
      2018,
      11,
      6,
      0,
      0,
      0,
      0
    ],
    "title": "customElements简述-笔记",
    "uuid": "b921517a71d6975276b0a16acc18047667769321",
    "summary": "<h4>custom elements</h4>\n<p>作用：将HTML页面的功能封装为<code>custom elements</code>(自定义标签)</p>\n<blockquote>\n<p><code>shadow root</code>：渲染隔离</p>\n</blockquote>\n<h4>API</h4>\n<ul>\n<li>\n<p>customElement.define()</p>\n<p>定义一个新的 自定义元素。</p>\n<p>参数1：<code>name</code>自定义...</p>\n</li>\n</ul>",
    "slug": "customElements-jian-shu-bi-ji",
    "sha": "a05dffbbc1c300934bccf6d802d61ea2a8458807"
  },
  "yuan-ma-yue-du-reach-router-yuan-ma-xue-xi-dao-de-2": {
    "relatedTags": [
      "源码",
      "router"
    ],
    "created_at": "2018-07-06",
    "timeArr": [
      2018,
      6,
      6,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-reach-router源码学习到的2",
    "uuid": "cc5d864eab97f30e3cb11aff77b2ac5a7ad4ed86",
    "summary": "<h4>路径匹配优先权问题</h4>\n<p>先假设一个问题：</p>\n<p>有一个匹配路径： <code>doc/artical</code></p>\n<p>待匹配路径有3个：</p>\n<p><code>doc/:section</code></p>\n<p><code>doc/*</code></p>\n<p><code>doc/artical</code></p>\n<p>该优先对哪个匹配呢？</p>\n<p>源码中是使用了一个评分的方法：</p>\n<ul>\n<li>先对路径去除头尾的&quot;/&quot; ，并且按&quot;/&quot;分割成路径片段数组\n...</li>\n</ul>",
    "slug": "yuan-ma-yue-du-reach-router-yuan-ma-xue-xi-dao-de-2",
    "sha": "a36a3611a3b4eab9e4d4f48583424f9a869764b8"
  },
  "react-diff": {
    "relatedTags": [
      "diff",
      "react",
      "算法"
    ],
    "created_at": "2018-06-21",
    "timeArr": [
      2018,
      5,
      21,
      0,
      0,
      0,
      0
    ],
    "title": "react-diff",
    "uuid": "a7eefe5d3d4ed07619a790048edf4b9617f40957",
    "summary": "<h4>Diff算法3个策略</h4>\n<ol>\n<li>跨层级不进行不比较</li>\n<li>不同类不进行比较</li>\n<li>同类同级通过key比较</li>\n</ol>\n<p>主要对第三种进行解释</p>\n<h4>例子</h4>\n<p>更新前组件：<code>A-B-C-D</code> =&gt; 更新后组件：<code>C-B-E-A</code></p>\n<p>满足<code>child._mountIndex &lt; lastIndex</code>才会进行组件移动</p>\n<ul>\n<li>`...</li>\n</ul>",
    "slug": "react-diff",
    "sha": "815f451f91044acdeba648889b432803b50a1130"
  },
  "guan-yu-hui-su-suan-fa-(backtrack)-de-mu-ban-jie-xi": {
    "relatedTags": [
      "算法",
      "leetcode"
    ],
    "created_at": "2018-10-06",
    "timeArr": [
      2018,
      9,
      6,
      0,
      0,
      0,
      0
    ],
    "title": "关于回溯算法(backtrack)的模板解析",
    "uuid": "362c875dc274eb593fe68c8afd58f51afebc57c9",
    "summary": "<p>今天在LeetCode看到一篇非常有价值的讨论，列举了一系列列数组的<code>回溯算法</code>，自己动手一个个完成后，\n感觉对理解回溯算法的原理有很大帮助。</p>\n<p>就用一篇文章记录下解析过程。</p>\n<p>[原文地址](https://leetcode.com/problems/combination-sum/discuss/16502/A-ge...</p>",
    "slug": "guan-yu-hui-su-suan-fa-(backtrack)-de-mu-ban-jie-xi",
    "sha": "8392ce085e533c1fff99ad21b3d8583449fec2d3"
  },
  "JS-de-AST(Esprima.parse)": {
    "relatedTags": [
      "ast",
      "正则"
    ],
    "created_at": "2018-06-27",
    "timeArr": [
      2018,
      5,
      27,
      0,
      0,
      0,
      0
    ],
    "title": "JS的AST(Esprima.parse)",
    "uuid": "36b0972f79325bab8c6db377892c184e894e5492",
    "summary": "<h4>使用AST完成需求</h4>\n<p>需求：输出方法中的参数为字符串'1234'的变量名</p>\n<pre class=\"hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-keyword\">var</span> a=<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">'1234'</span>);\n  <span class=\"hljs-keyword\">var</span> b=<span class=\"hljs-string\">'1234'</span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">double</span>(<span class=\"hljs-params\">n</span>)</span>{\n    <span class=\"hljs-keyword\">return</span> n*<span class=\"hljs-number\">2</span>\n  }\n  <span class=\"hljs-keyword\">var</span> c=double...</code></pre>",
    "slug": "JS-de-AST(Esprima.parse)",
    "sha": "8446b12b208921dadb0f44d47ca83eb637509139"
  },
  "MutationObserver-dui-xiang": {
    "relatedTags": [
      "mutationobserver"
    ],
    "created_at": "2018-08-29",
    "timeArr": [
      2018,
      7,
      29,
      0,
      0,
      0,
      0
    ],
    "title": "MutationObserver对象",
    "uuid": "e3b94840e980e8848b479296e62a83d39630ab76",
    "summary": "<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> observer=<span class=\"hljs-keyword\">new</span> MutationObserver(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">records</span>)</span>{\n  <span class=\"hljs-comment\">// 获取变化的DOM的一些属性 </span>\n  records.API1\n})\n</code></pre>\n<p>API1：</p>\n<pre class=\"hljs\"><code>API1={\ntype：观察的变动类型（attribute、characterData或者chil...</code></pre>",
    "slug": "MutationObserver-dui-xiang",
    "sha": "8540f01502cc34ee1bdc412b3483427e52a8e911"
  },
  "yuan-ma-yue-du-reselect-yuan-ma-xue-xi": {
    "relatedTags": [
      "源码",
      "缓存",
      "github"
    ],
    "created_at": "2018-07-13",
    "timeArr": [
      2018,
      6,
      13,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-reselect源码学习",
    "uuid": "2cf2373f2fa9c28ce15661630048ac1848d2530f",
    "summary": "<h4>reselect源码亮点介绍</h4>\n<p><a href=\"https://github.com/stonehank/sourcecode-analysis/blob/master/source-code.reselect/README.md\">完整源码说明注释</a></p>\n<p>导图：</p>\n<p>![](https://stonehank.github.io...</p>",
    "slug": "yuan-ma-yue-du-reselect-yuan-ma-xue-xi",
    "sha": "85d8aee7f13669499db1bd4d7c3233117665daea"
  },
  "canvas-zhi-xing-15-wan-li-zi-de-dong-hua": {
    "relatedTags": [
      "canvas"
    ],
    "created_at": "2018-08-26",
    "timeArr": [
      2018,
      7,
      26,
      0,
      0,
      0,
      0
    ],
    "title": "canvas执行15万粒子的动画",
    "uuid": "7d5b714624c6bcfe8c2c66acd5114f3f547fbb49",
    "summary": "<p>最近遇到的，目的是通过粒子动画渲染图片</p>\n<p>图片大小为500*300，并且粒子动画细度为1，也就是粒子总量为15万，并且当动画完成后，图片能完整清晰的显示出来</p>\n<p>最初尝试15万个粒子同时运动，结果标签页直接崩溃了，意料之中...</p>\n<pre class=\"hljs\"><code> <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> py = <span class=\"hljs-number\">0</span>; py &lt; targetH; py ++) ...</code></pre>",
    "slug": "canvas-zhi-xing-15-wan-li-zi-de-dong-hua",
    "sha": "742860bdc0a8dc633fd2c91feb13e60b00f46229"
  },
  "CSS-BEM-he-7-1": {
    "relatedTags": [
      "css"
    ],
    "created_at": "2018-08-08",
    "timeArr": [
      2018,
      7,
      8,
      0,
      0,
      0,
      0
    ],
    "title": "CSS BEM和7-1",
    "uuid": "7d006085fe6510e84760d5dac1964ffab407a64b",
    "summary": "<h4>css 的BEM方法和7-1规则</h4>\n<h4>BEM</h4>\n<p>按照<code>Block__Element--Modifier</code>命名</p>\n<p>例如：</p>\n<pre class=\"hljs\"><code>article__author\narticle__date\narticle__content-leftAlign\narticle__content-centerAlign\n</code></pre>\n<p>...</p>",
    "slug": "CSS-BEM-he-7-1",
    "sha": "749d64da627880acf963a5302a4e38ce920592d5"
  },
  "yi-ge-ji-lu-redux-de-dispatch-hao-shi-de-zhong-jian-jian": {
    "relatedTags": [
      "redux",
      "源码",
      "github"
    ],
    "created_at": "2018-07-17",
    "timeArr": [
      2018,
      6,
      17,
      0,
      0,
      0,
      0
    ],
    "title": "一个记录redux的dispatch耗时的中间件",
    "uuid": "8e74b1491a2006b6a1642598cc517a267cfa577b",
    "summary": "<h4>一个记录redux每次dispatch耗时中间件</h4>\n<h4>源码</h4>\n<p><a href=\"https://gist.github.com/clarkbw/966732806e7a38f5b49fd770c62a6099\">源码地址</a></p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> timing = <span class=\"hljs-function\"><span class=\"hljs-params\">store</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">next</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">action</span> =&gt;</span> {\n...</code></pre>",
    "slug": "yi-ge-ji-lu-redux-de-dispatch-hao-shi-de-zhong-jian-jian",
    "sha": "78386b134e2b2ff73ad010cc436a6bcaadc22582"
  },
  "yi-ge-chang-zheng-ze-de-shen-ru-li-jie": {
    "relatedTags": [
      "正则",
      "源码",
      "笔记"
    ],
    "created_at": "2018-07-18",
    "timeArr": [
      2018,
      6,
      18,
      0,
      0,
      0,
      0
    ],
    "title": "一个长正则的深入理解",
    "uuid": "cdf39a26b776d98ab203524d376b062840672373",
    "summary": "<h4>阅读lodash中一段长正则理解笔记</h4>\n<p>在lodash源码<code>/.internal/stringToPath.js</code>中：</p>\n<p>这里英文是原注释，中文是简单的翻译下，后面会详细解释：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">const</span> rePropName = <span class=\"hljs-built_in\">RegExp</span>(\n  <span class=\"hljs-comment\">// Match anything that isn't a do...</span></code></pre>",
    "slug": "yi-ge-chang-zheng-ze-de-shen-ru-li-jie",
    "sha": "784356b84252e1f80acd38952d47176e1e4a8836"
  },
  "guan-yu-wei-cao-zuo-fu-ying-yong-de-suan-fa-ti": {
    "relatedTags": [
      "算法",
      "leetcode"
    ],
    "created_at": "2018-09-06",
    "timeArr": [
      2018,
      8,
      6,
      0,
      0,
      0,
      0
    ],
    "title": "关于位操作符应用的算法题",
    "uuid": "c8b2b19bf52484de902c2d4d23a44ed8b158ab18",
    "summary": "<p><a href=\"https://leetcode.com/problems/maximum-product-of-word-lengths/\">原题目</a>：\n给定一个字符串数组，找到长度的最大值<code>length(word[i]) * length(word[j])</code>，其中两个单词中的字母无相同。您可以假定每个单词只包含小写字母。如果没有...</p>",
    "slug": "guan-yu-wei-cao-zuo-fu-ying-yong-de-suan-fa-ti",
    "sha": "7963f582de66e6e2582fb61249dbba57221190fe"
  },
  "yuan-ma-yue-du-reach-router-yuan-ma-xue-xi-dao-de-1": {
    "relatedTags": [
      "源码",
      "router",
      "react"
    ],
    "created_at": "2018-07-05",
    "timeArr": [
      2018,
      6,
      5,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-reach-router源码学习到的1",
    "uuid": "7b0adb17281c68e7822dafdd8044bb001e43c5ee",
    "summary": "<h4>popstate</h4>\n<p>只在浏览器下前进后退和改变hash触发，<code>pushState</code>和<code>replaceState</code>并不会触发</p>\n<p>源码中给<code>popstate</code>和<code>navigate</code>事件绑定了一旦执行就更新当前location(传递到context中的)</p>\n<h4>替代pushState和replaceState</h4>\n<p>源码...</p>",
    "slug": "yuan-ma-yue-du-reach-router-yuan-ma-xue-xi-dao-de-1",
    "sha": "7e151f2405bca2a2f40f41defe20c8dc037ac39e"
  },
  "cong-yuan-ma-li-jie-redux-observable": {
    "relatedTags": [
      "源码",
      "redux",
      "github"
    ],
    "created_at": "2018-07-31",
    "timeArr": [
      2018,
      6,
      31,
      0,
      0,
      0,
      0
    ],
    "title": "从源码理解redux-observable",
    "uuid": "11c12164597745ff2b79b9aa256465683ed63ab6",
    "summary": "<h4>阅读前提：</h4>\n<ol>\n<li>有rxjs基础，对<code>Observable</code>, <code>Subject</code>,<code>pipe</code>和一些操作符(例如<code>filter</code>,<code>map</code>,<code>merge</code>,<code>mergeMap</code>)执行流程有基本了解，最起码遇到不清楚有去查阅的动力</li>\n<li>比较熟悉<code>redux</code>中间件的写法，否则像`createEpicMidd...</li>\n</ol>",
    "slug": "cong-yuan-ma-li-jie-redux-observable",
    "sha": "6e85cade1d479e41467fc8f31c7cce1b2d0eca18"
  },
  "yuan-ma-yue-du-lodash-yi-ge-chuang-jian-shu-zu-de-si-kao": {
    "relatedTags": [
      "源码"
    ],
    "created_at": "2018-08-16",
    "timeArr": [
      2018,
      7,
      16,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-lodash-一个创建数组的思考",
    "uuid": "0d719ffaecb85402ef37b03bbd557d9adf641cd7",
    "summary": "<h4>创建数组的思考</h4>\n<p><code>lodash.js---&gt;.internal--&gt;baseClone.js</code>内部</p>\n<p>有一句：<code>const result = new array.constructor(length)</code></p>\n<p>这里array是一个经过<code>Array.isArray(array)===true</code>判断的数组，</p>\n<p>这句...</p>",
    "slug": "yuan-ma-yue-du-lodash-yi-ge-chuang-jian-shu-zu-de-si-kao",
    "sha": "7166eb621f1c1bf86fd6cf194dc19b9f3f408810"
  },
  "ji-lu-CRA-de-webpack-pei-zhi-ceng-jing-de-issue-2": {
    "relatedTags": [
      "github",
      "webpack",
      "react"
    ],
    "created_at": "2018-10-17",
    "timeArr": [
      2018,
      9,
      17,
      0,
      0,
      0,
      0
    ],
    "title": "记录CRA的webpack配置曾经的issue-2",
    "uuid": "09551be59c48cabd2ec9043da881b563d7044cbf",
    "summary": "<ul>\n<li>关于Uglify的<code>compress</code></li>\n</ul>\n<pre class=\"hljs\"><code> compress: {\n    ecma: 5,\n    warnings: false,\n    // Disabled because of an issue with Uglify breaking seemingly valid code:\n    // ...</code></pre>",
    "slug": "ji-lu-CRA-de-webpack-pei-zhi-ceng-jing-de-issue-2",
    "sha": "727e95a1ec46dc90c1cfe467e84a90fa08aedfb0"
  },
  "ji-lu-CRA-de-webpack-pei-zhi-ceng-jing-de-issue-1": {
    "relatedTags": [
      "webpack",
      "css",
      "react",
      "github",
      "性能"
    ],
    "created_at": "2018-10-16",
    "timeArr": [
      2018,
      9,
      16,
      0,
      0,
      0,
      0
    ],
    "title": "记录CRA的webpack配置曾经的issue-1",
    "uuid": "42db7875df4e226dd9de2945de9bc1f9b287114c",
    "summary": "<p>⚠webpack requires an identifier (ident) in options when {Function}/require is used (Complex Options).\nThe ident can be freely named as long as it is unique. It's recommended to name it (ident: 'postcss')</p>",
    "slug": "ji-lu-CRA-de-webpack-pei-zhi-ceng-jing-de-issue-1",
    "sha": "68bd27b56a1e0ed5a6a7ea8b9e7a53a8221e699d"
  },
  "wen-zhang-ji-lu-dang-qian-de-wang-ye-an-quan": {
    "relatedTags": [
      "npm",
      "表单",
      "网络安全"
    ],
    "created_at": "2018-07-30",
    "timeArr": [
      2018,
      6,
      30,
      0,
      0,
      0,
      0
    ],
    "title": "文章记录—当前的网页安全",
    "uuid": "fe3678963ac1c863362da40651884c9820158971",
    "summary": "<p>原文地址：https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5</p>\n<p>作者讲述了一些能够达成的破解网络安全手段(有些已被认为是bug修复，例如2)，并给出建议...</p>",
    "slug": "wen-zhang-ji-lu-dang-qian-de-wang-ye-an-quan",
    "sha": "6901bccad37993cd0ddb283e7bd8f2a32e5ae599"
  },
  "ji-lu-yi-dao-LeetCode-wei-cao-zuo-fu-ji-suan-dan-ge-shu-zi-fang-fa": {
    "relatedTags": [
      "leetcode"
    ],
    "created_at": "2018-10-05",
    "timeArr": [
      2018,
      9,
      5,
      0,
      0,
      0,
      0
    ],
    "title": "记录一道LeetCode 位操作符计算单个数字方法",
    "uuid": "df98df497745a7628226928d1110b2baad0c50cb",
    "summary": "<p><a href=\"https://leetcode.com/problems/single-number-ii/description/\">原题目：</a>\n<code>LeetCode</code>的一个题目，要求算出数组中单独出现的数字</p>\n<pre class=\"hljs\"><code>Given a non-empty array of integers, every element appear...</code></pre>",
    "slug": "ji-lu-yi-dao-LeetCode-wei-cao-zuo-fu-ji-suan-dan-ge-shu-zi-fang-fa",
    "sha": "6a99838485b9fda6b8a6b0e9d892100d68d0a27c"
  },
  "guan-yu-github-api.v3-ren-zheng-fang-mian-de-zong-jie": {
    "relatedTags": [
      "github"
    ],
    "created_at": "2018-09-28",
    "timeArr": [
      2018,
      8,
      28,
      0,
      0,
      0,
      0
    ],
    "title": "关于github-api.v3认证方面的总结",
    "uuid": "734ec46092d55f646e70dce2766a3c42e017cad4",
    "summary": "<h4>GithubAPI-Authorization</h4>\n<p>一些特定的API，例如获取<code>user</code>的public资料，<code>repo</code>的内容等，不认证也可以获取，\n区别是，不认证，大约每个小时只有60次调用的次数限制，而使用认证后，则大约有5000次的调用次数。</p>\n<p>认证有2方面，</p>\n<ol>\n<li>\n<p>使用你自己的名义去做一些事情</p>\n</li>\n<li>\n<p>...</p>\n</li>\n</ol>",
    "slug": "guan-yu-github-api.v3-ren-zheng-fang-mian-de-zong-jie",
    "sha": "6b205fb9eb1995355142e4b491f0e45bac6ca9f9"
  },
  "cssModule": {
    "relatedTags": [
      "cssmodule",
      "css",
      "webpack"
    ],
    "created_at": "2018-06-17",
    "timeArr": [
      2018,
      5,
      17,
      0,
      0,
      0,
      0
    ],
    "title": "cssModule",
    "uuid": "0c2b37a7633e1d040b742bc9653e1a42eef51f8c",
    "summary": "<p>cssModule配置，先进行webpack配置：</p>\n<pre class=\"hljs\"><code>// ...\ntest: /\\.css$/,\nuse: ['style-loader', {\n  loader: 'css-loader',\n  options: {\n    module: true,\n    localIdentName: '[name]-...</code></pre>",
    "slug": "cssModule",
    "sha": "6ccea1616a61dc321481094dcb50899b11c98624"
  },
  "LeetCode-huo-qu-zui-da-shou-yi-de-suan-fa": {
    "relatedTags": [
      "leetcode",
      "算法"
    ],
    "created_at": "2018-10-19",
    "timeArr": [
      2018,
      9,
      19,
      0,
      0,
      0,
      0
    ],
    "title": "LeetCode获取最大收益的算法",
    "uuid": "4483d4ae741e5f281dba7c87dd850e305a2b0565",
    "summary": "<p><code>Leetcode</code>上有一系列类似的题目，看了几位大神的答案，感觉这类题目都能套用，都是DP(动态规划)的思路。</p>\n<p>题目1：</p>\n<p>给出一个数组，其中每一个元素表示第<code>i</code>天的价格。</p>\n<p>你可以多次交易，但同一天只能交易1次，求交易获取最大值。</p>\n<p>例如：<code>[1,6,0,3,4,8,2]</code></p>\n<p>最大收益为：<code>6-1 + 8-0</code>...</p>",
    "slug": "LeetCode-huo-qu-zui-da-shou-yi-de-suan-fa",
    "sha": "61921acd4c40080ae873343cffc1a26316b6f608"
  },
  "npm-link-de-shi-yong": {
    "relatedTags": [
      "npm",
      "源码"
    ],
    "created_at": "2018-10-12",
    "timeArr": [
      2018,
      9,
      12,
      0,
      0,
      0,
      0
    ],
    "title": "npm-link的使用",
    "uuid": "4e6c7ab04e26dcf8fee1500f1d90cb218b836309",
    "summary": "<p>关于<code>npm-link</code>的使用</p>\n<p>当开发项目时，有时候会想用一个本地的工具，复制源码什么的太麻烦了，发布到npm也很麻烦，就只想直接用。\n那么可以考虑使用<code>npm-link</code>。</p>\n<p>现在我有一个工具项目叫做<code>tool</code></p>\n<p>我可以先注册到全局</p>\n<p><code>npm link tool</code></p>\n<p>接着，找到我想导入的项目：`cd proje...</p>",
    "slug": "npm-link-de-shi-yong",
    "sha": "622748c94137c2c180569b7e9ea94fee9140add1"
  },
  "node-querystring-he-url-bi-ji": {
    "relatedTags": [
      "笔记"
    ],
    "created_at": "2018-12-05",
    "timeArr": [
      2018,
      11,
      5,
      0,
      0,
      0,
      0
    ],
    "title": "node-querystring和url笔记",
    "uuid": "87971cd868e8cd749775bd93de4025ef1746d9d7",
    "summary": "<h4>querystring</h4>\n<ul>\n<li>querystring.stringify</li>\n</ul>\n<p>参数一：转换对象</p>\n<p><code>querystring.stringify({x:1,y:2,c:[3,4]})</code></p>\n<p>输出：</p>\n<p><code>x=1&amp;y=2&amp;c=3&amp;c=4</code></p>\n<p>参数二：输出连接符</p>\n<p>`querystring.stringify({x:1,y...</p>",
    "slug": "node-querystring-he-url-bi-ji",
    "sha": "65baf42e906ec1137456584196cc311c143c7570"
  },
  "yuan-ma-yue-du-react-motion-tuo-pu-pai-xu-si-xiang": {
    "relatedTags": [
      "源码",
      "react",
      "github"
    ],
    "created_at": "2018-08-10",
    "timeArr": [
      2018,
      7,
      10,
      0,
      0,
      0,
      0
    ],
    "title": "源码阅读-react-motion-拓扑排序思想",
    "uuid": "f616d21af7026eb71d6d96d1e0adfc13871af644",
    "summary": "<h4>阅读<a href=\"https://github.com/chenglou/react-motion\">react-motion</a>的源码时候，其中有一个组件<code>TransitionMotion</code>\n，它负责元素的新增和移除动画，内部有2个概念：<code>old</code>和<code>new</code></h4>\n<p>这就先说到排序，</p>\n<p>当动画队列出现如下状态...</p>",
    "slug": "yuan-ma-yue-du-react-motion-tuo-pu-pai-xu-si-xiang",
    "sha": "65c59ec0ce44ba503eeb5cfdeec3d1eba9b70047"
  },
  "es6-jian-tou-han-shu-de-this": {
    "relatedTags": [
      "es6"
    ],
    "created_at": "2018-06-09",
    "timeArr": [
      2018,
      5,
      9,
      0,
      0,
      0,
      0
    ],
    "title": "es6箭头函数的this",
    "uuid": "9ef13100cd0019709df5ac5974b441155efa3b42",
    "summary": "<p>箭头函数()=&gt;{},没有自己的this指针,this为上一层的的this指针</p>\n<p>function(){},有自己的this指针,this指向调用时的对象</p>\n<p>例子：</p>\n<pre class=\"hljs\"><code>a=<span class=\"hljs-string\">\"windowScope\"</span>\n<span class=\"hljs-keyword\">let</span> obj1={\n  <span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-comment\">// 向上找不到this指针，指向window</span>\n  <span class=\"hljs-attr\">show</span>:<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>=&gt;</span>...</code></pre>",
    "slug": "es6-jian-tou-han-shu-de-this",
    "sha": "662ce20e60723f1b990376486a6f12aef2e2935c"
  },
  "huo-qu-han-shu-can-shu-ming-cheng": {
    "relatedTags": [
      "npm",
      "正则",
      "es6",
      "ast"
    ],
    "created_at": "2018-09-13",
    "timeArr": [
      2018,
      8,
      13,
      0,
      0,
      0,
      0
    ],
    "title": "获取函数参数名称",
    "uuid": "be95143b4d5b92aa8901844dde5e73230a1d2f49",
    "summary": "<p>今天碰到一个需求，获取函数参数名称，\n刚开始打算用正则去处理，但函数写法(包括es6)也挺多的，</p>\n<p>例如：</p>\n<pre class=\"hljs\"><code>function x(a,b){}\nfunction x(a=5,b=3){}\nlet x=function(a=5,b){}\nlet x=(a=5,b)=&gt;a+b\nlet x=a=&gt;a*2\nfuncti...</code></pre>",
    "slug": "huo-qu-han-shu-can-shu-ming-cheng",
    "sha": "666081661a6e70d949e3a7754293a33f83e18432"
  },
  "yi-xie-bei-hu-lve-de-js-zhi-shi-3": {
    "relatedTags": [
      "es6"
    ],
    "created_at": "2018-06-26",
    "timeArr": [
      2018,
      5,
      26,
      0,
      0,
      0,
      0
    ],
    "title": "一些被忽略的js知识3",
    "uuid": "0c8cd68f3ca83da85ae41e597f8b4869615a425b",
    "summary": "<p>一些JS基础(3)</p>\n<h4>for...of</h4>\n<p><code>for..of</code>会寻找内置或者自定义的 @@iterator 对象并调用它的 next() 方法来遍历数据值</p>\n<p>array默认带有iterator，因此可以直接使用for...of</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">var</span> arr=[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> it=arr[Symbo...</code></pre>",
    "slug": "yi-xie-bei-hu-lve-de-js-zhi-shi-3",
    "sha": "4fd90b9ee966a8e1972197c101a2e960a01d9493"
  }
}
